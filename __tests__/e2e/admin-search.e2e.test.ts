import { test, expect } from '@playwright/test'

test.describe('Admin Search E2E', () => {
  test.beforeEach(async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    await page.goto('/admin/prompts')
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForSelector('input[placeholder*="–ü–æ–∏—Å–∫"]')
  })

  test('should show search input with placeholder', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    await expect(searchInput).toBeVisible()
    await expect(searchInput).toHaveAttribute('placeholder', /–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/)
  })

  test('should show suggestions on typing', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await searchInput.fill('test')
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    await page.waitForTimeout(700) // Debounce –≤—Ä–µ–º—è
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—è–≤–∏–ª–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    const suggestions = page.locator('[data-testid="search-suggestions"]')
    if (await suggestions.count() > 0) {
      await expect(suggestions).toBeVisible()
    }
  })

  test('should clear search with X button', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await searchInput.fill('test query')
    await expect(searchInput).toHaveValue('test query')
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
    const clearButton = page.locator('button[data-testid="clear-search"]')
    if (await clearButton.count() > 0) {
      await clearButton.click()
      await expect(searchInput).toHaveValue('')
    }
  })

  test('should show loading indicator during search', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–∏–º–∞–µ–º Enter
    await searchInput.fill('test query')
    await searchInput.press('Enter')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingIndicator = page.locator('[data-testid="search-loading"]')
    if (await loadingIndicator.count() > 0) {
      await expect(loadingIndicator).toBeVisible()
    }
  })

  test('should filter results based on search', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –í–≤–æ–¥–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    await searchInput.fill('test')
    await searchInput.press('Enter')
    
    // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await page.waitForTimeout(1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã
    const results = page.locator('[data-testid="prompt-card"]')
    const count = await results.count()
    
    if (count > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      for (let i = 0; i < count; i++) {
        const title = await results.nth(i).locator('h3').textContent()
        expect(title?.toLowerCase()).toContain('test')
      }
    }
  })

  test('should handle empty search results', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –í–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await searchInput.fill('nonexistentquery12345')
    await searchInput.press('Enter')
    
    // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await page.waitForTimeout(1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const noResultsMessage = page.locator('text=–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    if (await noResultsMessage.count() > 0) {
      await expect(noResultsMessage).toBeVisible()
    }
  })

  test('should handle special characters in search', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const specialQueries = [
      'test@example.com',
      'query with spaces',
      '–∑–∞–ø—Ä–æ—Å —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π',
      'query with numbers 123',
      'query with symbols !@#$%'
    ]
    
    for (const query of specialQueries) {
      await searchInput.fill(query)
      await searchInput.press('Enter')
      
      // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await page.waitForTimeout(500)
      
      // –û—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
      await searchInput.fill('')
    }
  })

  test('should handle rapid typing with debounce', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –ë—ã—Å—Ç—Ä–æ –≤–≤–æ–¥–∏–º —Å–∏–º–≤–æ–ª—ã
    await searchInput.fill('t')
    await page.waitForTimeout(100)
    await searchInput.fill('te')
    await page.waitForTimeout(100)
    await searchInput.fill('tes')
    await page.waitForTimeout(100)
    await searchInput.fill('test')
    
    // –ñ–¥–µ–º debounce
    await page.waitForTimeout(700)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await expect(searchInput).toHaveValue('test')
  })

  test('should handle blur event', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await searchInput.fill('test query')
    
    // –ö–ª–∏–∫–∞–µ–º –≤–Ω–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ (blur)
    await page.click('body')
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await page.waitForTimeout(500)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω
    await expect(searchInput).toHaveValue('test query')
  })

  test('should handle keyboard navigation', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    await searchInput.fill('test')
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    await page.waitForTimeout(700)
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await searchInput.press('ArrowDown')
    await searchInput.press('ArrowDown')
    await searchInput.press('Enter')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
    await expect(searchInput).toHaveValue('test')
  })

  test('should handle long search queries', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const longQuery = 'a'.repeat(200)
    await searchInput.fill(longQuery)
    await searchInput.press('Enter')
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await page.waitForTimeout(1000)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã)
    await expect(searchInput).toHaveValue(longQuery)
  })

  test('should handle unicode characters', async ({ page }) => {
    const searchInput = page.locator('input[placeholder*="–ü–æ–∏—Å–∫"]')
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Unicode —Å–∏–º–≤–æ–ª—ã
    const unicodeQueries = [
      '—Ç–µ—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π',
      'test with √©mojis üòÄ',
      '–∑–∞–ø—Ä–æ—Å —Å —Å–∏–º–≤–æ–ª–∞–º–∏: Œ±Œ≤Œ≥Œ¥Œµ',
      'mixed —Ä—É—Å—Å–∫–∏–π english'
    ]
    
    for (const query of unicodeQueries) {
      await searchInput.fill(query)
      await searchInput.press('Enter')
      
      // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await page.waitForTimeout(500)
      
      // –û—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
      await searchInput.fill('')
    }
  })
})
