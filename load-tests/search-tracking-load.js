import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate } from 'k6/metrics';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
const searchTrackingRate = new Rate('search_tracking_success_rate');
const searchValidationRate = new Rate('search_validation_success_rate');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
export const options = {
  stages: [
    { duration: '2m', target: 10 },   // –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '5m', target: 50 },   // –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '3m', target: 100 },   // –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '2m', target: 200 },   // –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '2m', target: 0 },     // –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ 0
  ],
  thresholds: {
    http_req_duration: ['p(95)<100'], // 95% –∑–∞–ø—Ä–æ—Å–æ–≤ < 100ms
    http_req_failed: ['rate<0.01'],   // <1% –æ—à–∏–±–æ–∫
    search_tracking_success_rate: ['rate>0.95'], // >95% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  },
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testQueries = [
  'hello world',
  'test search',
  '–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',
  'valid query',
  'search with emoji üòÄ',
  '123456789',
  '!!!!!',
  'spam',
  '—Ñ–æ–Ω',
  'very long query with many words to test performance',
  'unicode —Ç–µ—Å—Ç',
  'mixed —Ä—É—Å—Å–∫–∏–π english',
  'a', // –∫–æ—Ä–æ—Ç–∫–∏–π
  'ab', // –∫–æ—Ä–æ—Ç–∫–∏–π
  'abc', // –≤–∞–ª–∏–¥–Ω—ã–π
  'aaaaa', // –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
];

const baseUrl = 'http://localhost:3000';

export default function() {
  const query = testQueries[Math.floor(Math.random() * testQueries.length)];
  
  // –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const searchPayload = {
    query: query,
    resultsCount: Math.floor(Math.random() * 100),
    sessionId: `session_${Math.random().toString(36).substr(2, 9)}`,
    finished: true
  };

  const searchResponse = http.post(`${baseUrl}/api/search-tracking`, 
    JSON.stringify(searchPayload),
    {
      headers: { 'Content-Type': 'application/json' },
      tags: { endpoint: 'search-tracking' }
    }
  );

  const searchSuccess = check(searchResponse, {
    'search tracking status is 200 or 400': (r) => r.status === 200 || r.status === 400,
    'search tracking response time < 100ms': (r) => r.timings.duration < 100,
  });

  searchTrackingRate.add(searchSuccess);

  // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è 10% –∑–∞–ø—Ä–æ—Å–æ–≤)
  if (Math.random() < 0.1) {
    const metricsResponse = http.get(`${baseUrl}/api/admin/search-metrics`, {
      tags: { endpoint: 'search-metrics' }
    });

    const metricsSuccess = check(metricsResponse, {
      'metrics status is 200': (r) => r.status === 200,
      'metrics response time < 50ms': (r) => r.timings.duration < 50,
    });

    searchValidationRate.add(metricsSuccess);
  }

  sleep(0.1); // 100ms –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
}

export function handleSummary(data) {
  return {
    'load-test-results.json': JSON.stringify(data, null, 2),
  };
}
