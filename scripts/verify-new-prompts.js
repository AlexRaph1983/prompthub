/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ prompts_prompthub4.json
 */

const expectedPrompts = [
  "–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –≤—ã–≥–æ—Ä–∞—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: –±—ã—Å—Ç—Ä—ã–µ —à–∞–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
  "–ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∑–∞ 15 –º–∏–Ω—É—Ç", 
  "–ú–∏–Ω–∏-–±—é–¥–∂–µ—Ç: –∫–∞–∫ –¥–æ–∂–∏—Ç—å –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã",
  "–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–∏–ª–∞–Ω—Å-–∫–∞—Ä—å–µ—Ä—ã",
  "–°–∫—Ä–∏–ø—Ç –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã",
  "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –¥–ª—è —Å—Ç–æ—Ä–∏—Å Instagram",
  "–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä—É—Ç–∏–Ω—ã",
  "–ì–∞–π–¥ –ø–æ ChatGPT –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
  "–ö–∞–∫ –Ω–µ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä–æ–≤–∞—Ç—å: –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å",
  "–ü–ª–∞–Ω –∑–∞–ø—É—Å–∫–∞ Telegram-–∫–∞–Ω–∞–ª–∞ —Å –Ω—É–ª—è"
];

async function checkPrompts() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ prompts_prompthub4.json...\n');
    
    const response = await fetch('http://localhost:3000/api/prompts?limit=20');
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${data.error || 'Unknown error'}`);
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${data.items.length}`);
    console.log(`üìÑ –ï—Å—Ç—å –µ—â–µ –ø—Ä–æ–º–ø—Ç—ã: ${data.hasMore ? '–î–∞' : '–ù–µ—Ç'}\n`);
    
    const foundPrompts = [];
    const missingPrompts = [];
    
    expectedPrompts.forEach(expectedTitle => {
      const found = data.items.find(item => item.title === expectedTitle);
      if (found) {
        foundPrompts.push({
          title: found.title,
          id: found.id,
          author: found.author,
          category: found.category,
          model: found.model,
          tags: found.tags
        });
      } else {
        missingPrompts.push(expectedTitle);
      }
    });
    
    console.log('‚úÖ –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ú–ü–¢–´:');
    foundPrompts.forEach((prompt, index) => {
      console.log(`${index + 1}. "${prompt.title}"`);
      console.log(`   ID: ${prompt.id}`);
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${prompt.category} | –ú–æ–¥–µ–ª—å: ${prompt.model}`);
      console.log(`   –¢–µ–≥–∏: ${prompt.tags.join(', ')}\n`);
    });
    
    if (missingPrompts.length > 0) {
      console.log('‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ú–ü–¢–´:');
      missingPrompts.forEach((title, index) => {
        console.log(`${index + 1}. "${title}"`);
      });
      console.log('');
    }
    
    console.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ${foundPrompts.length}/${expectedPrompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);
    
    if (foundPrompts.length === expectedPrompts.length) {
      console.log('üéâ –í–°–ï –ü–†–û–ú–ü–¢–´ –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–´ –ò –û–¢–û–ë–†–ê–ñ–ê–Æ–¢–°–Ø!');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–ø—Ç–æ–≤:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
    console.log('1. –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (npm run dev)');
    console.log('2. API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:3000/api/prompts');
    console.log('3. –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
  }
}

checkPrompts();
