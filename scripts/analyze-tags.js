const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function analyzeTags() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã —Å —Ç–µ–≥–∞–º–∏
    const prompts = await prisma.prompt.findMany({
      select: {
        id: true,
        title: true,
        tags: true
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: ${prompts.length}`);
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    const allTags = new Set();
    prompts.forEach(prompt => {
      if (prompt.tags) {
        const tags = prompt.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
        tags.forEach(tag => allTags.add(tag));
      }
    });
    
    console.log(`üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${allTags.size}`);
    console.log('üìù –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤:');
    Array.from(allTags).sort().forEach((tag, index) => {
      console.log(`  ${index + 1}. ${tag}`);
    });
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤
    const tagCounts = {};
    prompts.forEach(prompt => {
      if (prompt.tags) {
        const tags = prompt.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
        tags.forEach(tag => {
          tagCounts[tag] = (tagCounts[tag] || 0) + 1;
        });
      }
    });
    
    console.log('\nüìà –¢–æ–ø-20 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–≥–æ–≤:');
    const sortedTags = Object.entries(tagCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 20);
    
    sortedTags.forEach(([tag, count], index) => {
      console.log(`  ${index + 1}. ${tag} (${count} –ø—Ä–æ–º–ø—Ç–æ–≤)`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeTags();
