/**
 * –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function debugSpecificPrompt() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–†–û–ú–ü–¢–ê\n')

  const promptId = 'cmftyuu1v00539l6hapwra6su'
  const promptTitle = '–†–µ–≥–≥–∏ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–∞–Ω–∏–µ–º'

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞
    const prompt = await prisma.prompt.findUnique({
      where: { id: promptId },
      select: { 
        id: true, 
        title: true, 
        views: true,
        authorId: true,
        createdAt: true
      }
    })

    if (!prompt) {
      console.log('‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      return
    }

    console.log(`üìã –ü—Ä–æ–º–ø—Ç: "${prompt.title}"`)
    console.log(`üÜî ID: ${prompt.id}`)
    console.log(`üë§ –ê–≤—Ç–æ—Ä: ${prompt.authorId}`)
    console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${prompt.createdAt}`)
    console.log()

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    console.log('üìä –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –ò–°–¢–û–ß–ù–ò–ö–ò –ü–†–û–°–ú–û–¢–†–û–í:')
    
    // –ü—Ä—è–º–æ–µ –ø–æ–ª–µ
    console.log(`  üìä prompt.views: ${prompt.views}`)
    
    // viewAnalytics
    const analytics = await prisma.viewAnalytics.findFirst({
      where: { promptId },
      select: { countedViews: true }
    })
    console.log(`  üìä viewAnalytics: ${analytics?.countedViews || 0}`)
    
    // promptViewEvent
    const viewEvents = await prisma.promptViewEvent.count({
      where: { promptId, isCounted: true }
    })
    console.log(`  üìä promptViewEvent: ${viewEvents}`)
    
    // promptInteraction
    const interactions = await prisma.promptInteraction.count({
      where: { promptId, type: { in: ['view', 'open'] } }
    })
    console.log(`  üìä promptInteraction: ${interactions}`)

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º ViewsService –ª–æ–≥–∏–∫—É
    console.log('\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú VIEWSERVICE –õ–û–ì–ò–ö–£:')
    
    let viewsServiceResult = 0
    let source = 'none'
    
    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: viewAnalytics
    if (analytics?.countedViews && analytics.countedViews > 0) {
      viewsServiceResult = analytics.countedViews
      source = 'viewAnalytics'
    }
    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: promptViewEvent
    else if (viewEvents > 0) {
      viewsServiceResult = viewEvents
      source = 'promptViewEvent'
    }
    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: promptInteraction
    else if (interactions > 0) {
      viewsServiceResult = interactions
      source = 'promptInteraction'
    }
    // –ü–†–ò–û–†–ò–¢–ï–¢ 4: prompt.views
    else {
      viewsServiceResult = prompt.views
      source = 'prompt.views'
    }
    
    console.log(`  üéØ ViewsService —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${viewsServiceResult}`)
    console.log(`  üéØ –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}`)

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò:')
    if (prompt.views === viewsServiceResult) {
      console.log(`  ‚úÖ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: ${prompt.views} = ${viewsServiceResult}`)
    } else {
      console.log(`  ‚ùå –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: ${prompt.views} ‚â† ${viewsServiceResult}`)
      console.log(`  üîß ViewsService –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å: ${viewsServiceResult}`)
      console.log(`  üîß –ü—Ä—è–º–æ–µ –ø–æ–ª–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: ${prompt.views}`)
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ promptInteraction
    if (interactions > 0) {
      console.log('\nüìã –î–ï–¢–ê–õ–ò PROMPTINTERACTION:')
      const interactionDetails = await prisma.promptInteraction.findMany({
        where: { promptId, type: { in: ['view', 'open'] } },
        select: { 
          id: true, 
          type: true, 
          createdAt: true,
          userId: true,
          ipHash: true
        },
        orderBy: { createdAt: 'desc' },
        take: 5
      })
      
      interactionDetails.forEach((interaction, i) => {
        console.log(`  ${i + 1}. ${interaction.type} - ${interaction.createdAt} (user: ${interaction.userId || 'anonymous'})`)
      })
    }

    console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

debugSpecificPrompt().catch(console.error)
