const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkAllDuplicates() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—Ü–µ–Ω–æ–∫ –≤ –ë–î...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
    const allRatings = await prisma.rating.findMany({
      include: {
        user: {
          select: {
            id: true,
            name: true
          }
        },
        prompt: {
          select: {
            id: true,
            title: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
    
    console.log(`üìä –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫ –≤ –ë–î: ${allRatings.length}`)
    
    if (allRatings.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
      return
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ userId + promptId –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const ratingsByUserAndPrompt = {}
    allRatings.forEach(rating => {
      const key = `${rating.userId}_${rating.promptId}`
      if (!ratingsByUserAndPrompt[key]) {
        ratingsByUserAndPrompt[key] = []
      }
      ratingsByUserAndPrompt[key].push(rating)
    })
    
    console.log('\nüìã –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –ø—Ä–æ–º–ø—Ç–∞–º:')
    
    let totalDuplicates = 0
    const duplicatesToRemove = []
    
    Object.entries(ratingsByUserAndPrompt).forEach(([key, ratings]) => {
      const [userId, promptId] = key.split('_')
      const userName = ratings[0].user?.name || 'Unknown'
      const promptTitle = ratings[0].prompt?.title || 'Unknown'
      
      if (ratings.length > 1) {
        console.log(`\n‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢–´: ${userName} -> "${promptTitle}"`)
        console.log(`   –û—Ü–µ–Ω–æ–∫: ${ratings.length}`)
        
        totalDuplicates += ratings.length - 1
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é)
        const sortedRatings = ratings.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é –Ω–æ–≤—É—é), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const toKeep = sortedRatings[0]
        const toRemove = sortedRatings.slice(1)
        
        console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º: ID ${toKeep.id} (${toKeep.createdAt})`)
        
        toRemove.forEach(rating => {
          console.log(`   üóëÔ∏è  –£–¥–∞–ª—è–µ–º: ID ${rating.id} (${rating.createdAt})`)
          duplicatesToRemove.push(rating.id)
        })
      }
    })
    
    console.log(`\nüìä –ò—Ç–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicates}`)
    console.log(`üóëÔ∏è  –û—Ü–µ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${duplicatesToRemove.length}`)
    
    if (duplicatesToRemove.length > 0) {
      console.log('\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã! –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏.')
      console.log('üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.')
    } else {
      console.log('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í—Å–µ –æ—Ü–µ–Ω–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã.')
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:')
    const userStats = {}
    allRatings.forEach(rating => {
      const userName = rating.user?.name || 'Unknown'
      if (!userStats[userName]) {
        userStats[userName] = 0
      }
      userStats[userName]++
    })
    
    Object.entries(userStats).forEach(([userName, count]) => {
      console.log(`  üìù ${userName}: ${count} –æ—Ü–µ–Ω–æ–∫`)
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkAllDuplicates()




