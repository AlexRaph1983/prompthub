/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ viewAnalytics, promptViewEvent –∏ promptInteraction
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

interface ViewsRestoreResult {
  promptId: string
  title: string
  oldViews: number
  newViews: number
  source: 'viewAnalytics' | 'promptViewEvent' | 'promptInteraction' | 'unchanged'
}

async function getViewsFromAnalytics(promptId: string): Promise<number> {
  const result = await prisma.viewAnalytics.aggregate({
    where: { promptId },
    _sum: { countedViews: true },
  })
  return result._sum.countedViews || 0
}

async function getViewsFromEvents(promptId: string): Promise<number> {
  const result = await prisma.promptViewEvent.count({
    where: { 
      promptId,
      isCounted: true
    },
  })
  return result
}

async function getViewsFromInteractions(promptId: string): Promise<number> {
  const result = await prisma.promptInteraction.count({
    where: { 
      promptId,
      type: { in: ['view', 'open'] }
    },
  })
  return result
}

async function restoreViewsForPrompt(prompt: { id: string, title: string, views: number }): Promise<ViewsRestoreResult> {
  const { id: promptId, title, views: currentViews } = prompt
  
  // –ï—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —É–∂–µ –µ—Å—Ç—å –∏ –±–æ–ª—å—à–µ 0, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
  if (currentViews > 0) {
    return {
      promptId,
      title,
      oldViews: currentViews,
      newViews: currentViews,
      source: 'unchanged'
    }
  }
  
  // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  let restoredViews = 0
  let source: 'viewAnalytics' | 'promptViewEvent' | 'promptInteraction' | 'unchanged' = 'unchanged'
  
  // 1. –ü—Ä–æ–±—É–µ–º viewAnalytics
  const analyticsViews = await getViewsFromAnalytics(promptId)
  if (analyticsViews > 0) {
    restoredViews = analyticsViews
    source = 'viewAnalytics'
  }
  
  // 2. –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, –ø—Ä–æ–±—É–µ–º —Å–æ–±—ã—Ç–∏—è
  if (restoredViews === 0) {
    const eventViews = await getViewsFromEvents(promptId)
    if (eventViews > 0) {
      restoredViews = eventViews
      source = 'promptViewEvent'
    }
  }
  
  // 3. –ï—Å–ª–∏ –∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
  if (restoredViews === 0) {
    const interactionViews = await getViewsFromInteractions(promptId)
    if (interactionViews > 0) {
      restoredViews = interactionViews
      source = 'promptInteraction'
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
  if (restoredViews > 0) {
    await prisma.prompt.update({
      where: { id: promptId },
      data: { views: restoredViews }
    })
  }
  
  return {
    promptId,
    title,
    oldViews: currentViews,
    newViews: restoredViews,
    source
  }
}

async function main() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤...\n')
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã
  const prompts = await prisma.prompt.findMany({
    select: { id: true, title: true, views: true },
    orderBy: { createdAt: 'desc' }
  })
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: ${prompts.length}`)
  
  const results: ViewsRestoreResult[] = []
  let restored = 0
  let unchanged = 0
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  for (const [index, prompt] of prompts.entries()) {
    const result = await restoreViewsForPrompt(prompt)
    results.push(result)
    
    if (result.source !== 'unchanged') {
      restored++
      console.log(`‚úÖ ${index + 1}/${prompts.length}: "${result.title.substring(0, 50)}..." ${result.oldViews} ‚Üí ${result.newViews} (${result.source})`)
    } else {
      unchanged++
      if (result.oldViews > 0) {
        console.log(`‚ö™ ${index + 1}/${prompts.length}: "${result.title.substring(0, 50)}..." —É–∂–µ –∏–º–µ–µ—Ç ${result.oldViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`)
      }
    }
  }
  
  console.log('\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:')
  console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${restored} –ø—Ä–æ–º–ø—Ç–æ–≤`)
  console.log(`‚ö™ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${unchanged} –ø—Ä–æ–º–ø—Ç–æ–≤`)
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const bySource = results.reduce((acc, r) => {
    acc[r.source] = (acc[r.source] || 0) + 1
    return acc
  }, {} as Record<string, number>)
  
  console.log('\nüìä –ò–°–¢–û–ß–ù–ò–ö–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:')
  Object.entries(bySource).forEach(([source, count]) => {
    const emoji = source === 'unchanged' ? '‚ö™' : 
                  source === 'viewAnalytics' ? 'üìà' :
                  source === 'promptViewEvent' ? 'üìã' : 'üîó'
    console.log(`${emoji} ${source}: ${count}`)
  })
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
  const topRestored = results
    .filter(r => r.source !== 'unchanged')
    .sort((a, b) => b.newViews - a.newViews)
    .slice(0, 10)
  
  if (topRestored.length > 0) {
    console.log('\nüèÜ –¢–û–ü –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ü–†–û–ú–ü–¢–û–í:')
    topRestored.forEach((r, i) => {
      console.log(`${i + 1}. "${r.title}" - ${r.newViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${r.source})`)
    })
  }
  
  console.log('\nüéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
}

main()
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
