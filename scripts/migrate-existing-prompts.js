const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –Ω–æ–≤—ã–µ
const categoryMapping = {
  'Legal': 'legal',
  'Health': 'health', 
  'Education': 'education',
  'Marketing': 'marketing-writing',
  'Writing': 'marketing-writing',
  'Image': 'image',
  'Video': 'video',
  'Chat': 'chat',
  'Code': 'code',
  'SEO': 'seo',
  'Design': 'design',
  'Music': 'music',
  'Audio': 'audio',
  '3D': '3d',
  'Animation': 'animation',
  'Business': 'business',
  'Research': 'research',
  'Analysis': 'analysis',
  'Creative': 'creative',
  'Productivity': 'productivity',
  'Gaming': 'gaming',
  'Finance': 'finance',
  'Cooking': 'cooking'
};

async function migrateExistingPrompts() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –±–µ–∑ —Å–≤—è–∑–∏ —Å –Ω–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const existingPrompts = await prisma.prompt.findMany({
      where: { categoryId: null },
      select: {
        id: true,
        title: true,
        category: true,
        tags: true
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${existingPrompts.length}`);
    
    if (existingPrompts.length === 0) {
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ–º–ø—Ç—ã —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
      return;
    }
    
    let migrated = 0;
    let skipped = 0;
    
    for (const prompt of existingPrompts) {
      try {
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const newCategorySlug = categoryMapping[prompt.category];
        
        if (!newCategorySlug) {
          console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${prompt.category} (–ø—Ä–æ–º–ø—Ç: ${prompt.title})`);
          skipped++;
          continue;
        }
        
        const category = await prisma.category.findUnique({
          where: { slug: newCategorySlug }
        });
        
        if (!category) {
          console.log(`‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${newCategorySlug}`);
          skipped++;
          continue;
        }
        
        // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        await prisma.prompt.update({
          where: { id: prompt.id },
          data: { categoryId: category.id }
        });
        
        console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: ${prompt.title} ‚Üí ${category.nameRu}`);
        migrated++;
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (prompt.tags) {
          const tagNames = prompt.tags.split(',').map(t => t.trim()).filter(Boolean);
          
          for (const tagName of tagNames) {
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            let tag = await prisma.tag.findFirst({
              where: { 
                OR: [
                  { name: tagName },
                  { slug: tagName.toLowerCase().replace(/\s+/g, '-') }
                ]
              }
            });
            
            if (!tag) {
              tag = await prisma.tag.create({
                data: {
                  name: tagName,
                  slug: tagName.toLowerCase().replace(/\s+/g, '-'),
                  description: `–¢–µ–≥: ${tagName}`,
                  isNsfw: tagName.toLowerCase().includes('nsfw')
                }
              });
              console.log(`  üè∑Ô∏è –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ–≥: ${tagName}`);
            }
            
            // –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —Ç–µ–≥–æ–º
            await prisma.promptTag.upsert({
              where: {
                promptId_tagId: {
                  promptId: prompt.id,
                  tagId: tag.id
                }
              },
              update: {},
              create: {
                promptId: prompt.id,
                tagId: tag.id
              }
            });
          }
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ ${prompt.id}:`, error.message);
        skipped++;
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
    console.log('\nüìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏...');
    await prisma.category.updateMany({
      data: {
        promptCount: await prisma.prompt.count({
          where: { categoryId: { not: null } }
        })
      }
    });
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migrated}`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

migrateExistingPrompts();
