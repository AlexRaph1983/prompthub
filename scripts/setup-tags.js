const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function setupTags() {
  try {
    console.log('üè∑Ô∏è –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–µ–≥–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã —Å —Ç–µ–≥–∞–º–∏
    const prompts = await prisma.prompt.findMany({
      select: {
        id: true,
        title: true,
        tags: true
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: ${prompts.length}`);
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º
    const tagCounts = {};
    const tagPrompts = {};
    
    prompts.forEach(prompt => {
      if (prompt.tags) {
        const tags = prompt.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
        tags.forEach(tag => {
          tagCounts[tag] = (tagCounts[tag] || 0) + 1;
          if (!tagPrompts[tag]) tagPrompts[tag] = [];
          tagPrompts[tag].push(prompt.id);
        });
      }
    });
    
    console.log(`üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${Object.keys(tagCounts).length}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    for (const [tagName, count] of Object.entries(tagCounts)) {
      // –°–æ–∑–¥–∞–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–≥–∞
      const slug = tagName
        .toLowerCase()
        .replace(/[^a-z0-9–∞-—è\s]/g, '')
        .replace(/\s+/g, '-')
        .trim();
      
      try {
        const tag = await prisma.tag.upsert({
          where: { slug },
          update: {
            name: tagName,
            promptCount: count,
            isActive: true
          },
          create: {
            name: tagName,
            slug,
            promptCount: count,
            isActive: true
          }
        });
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ–≥: ${tagName} (${count} –ø—Ä–æ–º–ø—Ç–æ–≤)`);
        
        // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
        for (const promptId of tagPrompts[tagName]) {
          try {
            await prisma.promptTag.upsert({
              where: {
                promptId_tagId: {
                  promptId,
                  tagId: tag.id
                }
              },
              update: {},
              create: {
                promptId,
                tagId: tag.id
              }
            });
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if (!error.message.includes('Unique constraint')) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Ç–µ–≥–∞ ${tagName} —Å –ø—Ä–æ–º–ø—Ç–æ–º ${promptId}:`, error.message);
            }
          }
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞ ${tagName}:`, error.message);
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 —Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const topTags = await prisma.tag.findMany({
      where: { isActive: true },
      orderBy: { promptCount: 'desc' },
      take: 20,
      select: {
        name: true,
        slug: true,
        promptCount: true
      }
    });
    
    console.log('\nüìà –¢–æ–ø-20 —Ç–µ–≥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    topTags.forEach((tag, index) => {
      console.log(`  ${index + 1}. ${tag.name} (${tag.promptCount} –ø—Ä–æ–º–ø—Ç–æ–≤) - /tag/${tag.slug}`);
    });
    
    console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setupTags();
