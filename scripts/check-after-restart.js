/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

async function checkAfterRestart() {
  console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê\n')

  const baseUrl = 'https://prompt-hub.site'

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ API endpoints
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ API endpoints...')
    
    const testPromptId = 'cmftyuu1v00539l6hapwra6su'
    const results = {}
    
    // API Health
    try {
      const healthResponse = await fetch(`${baseUrl}/api/health`)
      if (healthResponse.ok) {
        const healthData = await healthResponse.json()
        console.log(`  ‚úÖ API Health: ${JSON.stringify(healthData)}`)
      } else {
        console.log(`  ‚ùå API Health error: ${healthResponse.status}`)
      }
    } catch (error) {
      console.log(`  ‚ùå API Health error: ${error.message}`)
    }

    // API Details
    try {
      const detailsResponse = await fetch(`${baseUrl}/api/prompts/${testPromptId}`)
      if (detailsResponse.ok) {
        const detailsData = await detailsResponse.json()
        results.details = detailsData.views
        console.log(`  üìä API Details views: ${results.details}`)
      } else {
        console.log(`  ‚ùå API Details error: ${detailsResponse.status}`)
      }
    } catch (error) {
      console.log(`  ‚ùå API Details error: ${error.message}`)
    }

    // API Recommendations
    try {
      const recommendationsResponse = await fetch(`${baseUrl}/api/recommendations`)
      if (recommendationsResponse.ok) {
        const recommendationsData = await recommendationsResponse.json()
        const foundPrompt = recommendationsData.find(item => item.prompt?.id === testPromptId)
        if (foundPrompt) {
          results.recommendations = foundPrompt.prompt?.views
          console.log(`  üìä API Recommendations views: ${results.recommendations}`)
        } else {
          console.log(`  ‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö`)
        }
      } else {
        console.log(`  ‚ùå API Recommendations error: ${recommendationsResponse.status}`)
      }
    } catch (error) {
      console.log(`  ‚ùå API Recommendations error: ${error.message}`)
    }

    // API Stats
    try {
      const statsResponse = await fetch(`${baseUrl}/api/stats`)
      if (statsResponse.ok) {
        const statsData = await statsResponse.json()
        results.stats = statsData.views
        console.log(`  üìä API Stats views: ${results.stats}`)
      } else {
        console.log(`  ‚ùå API Stats error: ${statsResponse.status}`)
      }
    } catch (error) {
      console.log(`  ‚ùå API Stats error: ${error.message}`)
    }

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:')
    console.log(`  üìä Details: ${results.details}`)
    console.log(`  üìä Recommendations: ${results.recommendations}`)
    console.log(`  üìä Stats: ${results.stats}`)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    const values = Object.values(results).filter(v => v !== undefined)
    const uniqueValues = [...new Set(values)]
    
    console.log(`\nüîç –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨:`)
    console.log(`  üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${uniqueValues.length}`)
    console.log(`  üìä –ó–Ω–∞—á–µ–Ω–∏—è: ${uniqueValues.join(', ')}`)
    
    if (uniqueValues.length === 1) {
      console.log(`  ‚úÖ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: –≤—Å–µ API –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!`)
      console.log(`  üéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!`)
    } else {
      console.log(`  ‚ùå –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: —Ä–∞–∑–Ω—ã–µ API –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!`)
      console.log(`  üîß –ü–†–û–ë–õ–ï–ú–ê: ViewsService —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ —Ä–∞–∑–Ω—ã—Ö API!`)
    }

    // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
    if (uniqueValues.length === 1) {
      console.log('  ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞! –í—Å–µ API –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã.')
      console.log('  üéâ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º!')
    } else {
      console.log('  üîß –ù—É–∂–Ω–æ –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä')
      console.log('  üîß –í–æ–∑–º–æ–∂–Ω–æ, –¥–µ–ø–ª–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ')
      console.log('  üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞: sudo reboot')
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error)
  }
}

checkAfterRestart().catch(console.error)
