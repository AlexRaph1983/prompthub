const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testSearchTracking() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞...');
  
  const testData = {
    query: '—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
    resultsCount: 5,
    clickedResult: null,
    sessionId: 'test-session-123'
  };

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testData);
    const response = await fetch('http://localhost:3000/api/search-tracking', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData),
    });

    console.log(`‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
    const result = await response.json();
    console.log('üëç –£—Å–ø–µ—à–Ω–æ:', result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const count = await prisma.searchQuery.count();
    console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: ${count}`);

    const latestQuery = await prisma.searchQuery.findFirst({
      orderBy: {
        createdAt: 'desc',
      },
    });
    console.log('üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:', latestQuery);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testSearchTracking();