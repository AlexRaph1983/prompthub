/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function checkViews() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º views –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–º–ø—Ç—ã
    const prompts = await prisma.prompt.findMany({
      select: { id: true, title: true, views: true, createdAt: true },
      orderBy: { createdAt: 'desc' },
      take: 5
    })
    
    console.log('üìä –ü–û–°–õ–ï–î–ù–ò–ï –ü–†–û–ú–ü–¢–´:')
    prompts.forEach((p, i) => {
      console.log(`${i + 1}. "${p.title.substring(0, 50)}..." - ${p.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${p.id})`)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–µ—Å—Ç–∞
    const testPromptId = prompts[0]?.id
    if (testPromptId) {
      console.log(`\nüîç –î–ï–¢–ê–õ–ò –ü–†–û–ú–ü–¢–ê ${testPromptId}:`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
      const prompt = await prisma.prompt.findUnique({
        where: { id: testPromptId },
        select: { id: true, title: true, views: true }
      })
      console.log(`üìä Prompt.views: ${prompt?.views}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º viewAnalytics
      const analytics = await prisma.viewAnalytics.findMany({
        where: { promptId: testPromptId },
        select: { countedViews: true, date: true }
      })
      console.log(`üìà ViewAnalytics –∑–∞–ø–∏—Å–µ–π: ${analytics.length}`)
      analytics.forEach(a => console.log(`   - ${a.date}: ${a.countedViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º promptViewEvent
      const events = await prisma.promptViewEvent.findMany({
        where: { promptId: testPromptId },
        select: { isCounted: true, createdAt: true }
      })
      console.log(`üìã PromptViewEvent –∑–∞–ø–∏—Å–µ–π: ${events.length}`)
      events.forEach(e => console.log(`   - ${e.createdAt.toISOString()}: counted=${e.isCounted}`))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º promptInteraction
      const interactions = await prisma.promptInteraction.findMany({
        where: { promptId: testPromptId, type: { in: ['view', 'open'] } },
        select: { type: true, createdAt: true }
      })
      console.log(`üîó PromptInteraction –∑–∞–ø–∏—Å–µ–π: ${interactions.length}`)
      interactions.forEach(i => console.log(`   - ${i.createdAt.toISOString()}: ${i.type}`))
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkViews()
