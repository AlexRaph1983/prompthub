const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkProductionData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤
    const promptCount = await prisma.prompt.count();
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–≤: ${promptCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryCount = await prisma.category.count();
    console.log(`üìÅ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏
    const tagCount = await prisma.tag.count();
    console.log(`üè∑Ô∏è –í—Å–µ–≥–æ —Ç–µ–≥–æ–≤: ${tagCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const promptsWithCategory = await prisma.prompt.count({
      where: { categoryId: { not: null } }
    });
    console.log(`üîó –ü—Ä–æ–º–ø—Ç–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${promptsWithCategory}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const oldCategories = await prisma.prompt.groupBy({
      by: ['category'],
      _count: { category: true }
    });
    
    if (oldCategories.length > 0) {
      console.log('\nüìã –°—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:');
      oldCategories.forEach(cat => {
        console.log(`  - ${cat.category}: ${cat._count.category} –ø—Ä–æ–º–ø—Ç–æ–≤`);
      });
    } else {
      console.log('\nüìã –°—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const newCategories = await prisma.category.findMany({
      select: {
        nameRu: true,
        slug: true,
        promptCount: true,
        isActive: true
      },
      orderBy: { promptCount: 'desc' }
    });
    
    console.log('\nüÜï –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    newCategories.forEach(cat => {
      const status = cat.isActive ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ${cat.nameRu} (${cat.slug}): ${cat.promptCount} –ø—Ä–æ–º–ø—Ç–æ–≤`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏
    const tags = await prisma.tag.findMany({
      select: {
        name: true,
        slug: true,
        promptCount: true,
        isNsfw: true,
        isActive: true
      },
      orderBy: { promptCount: 'desc' }
    });
    
    console.log('\nüè∑Ô∏è –¢–µ–≥–∏:');
    tags.forEach(tag => {
      const status = tag.isActive ? '‚úÖ' : '‚ùå';
      const nsfw = tag.isNsfw ? ' [NSFW]' : '';
      console.log(`  ${status} ${tag.name}${nsfw}: ${tag.promptCount} –ø—Ä–æ–º–ø—Ç–æ–≤`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const subcategories = await prisma.category.findMany({
      where: { parentId: { not: null } },
      select: {
        nameRu: true,
        slug: true,
        parent: {
          select: { nameRu: true }
        }
      }
    });
    
    if (subcategories.length > 0) {
      console.log('\nüå≥ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
      subcategories.forEach(sub => {
        console.log(`  - ${sub.nameRu} (—Ä–æ–¥–∏—Ç–µ–ª—å: ${sub.parent.nameRu})`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    const startTime = Date.now();
    await prisma.prompt.findMany({ take: 10 });
    const queryTime = Date.now() - startTime;
    console.log(`  –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ (10 –ø—Ä–æ–º–ø—Ç–æ–≤): ${queryTime}ms`);
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (promptCount > 0 && promptsWithCategory === 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç—ã, –Ω–æ –æ–Ω–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.');
      console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: node scripts/migrate-existing-prompts.js');
    }
    
    if (categoryCount === 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/seed-categories.js');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

checkProductionData();
