const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function debugMissingPrompts() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–ø–∞–≤—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...');
  
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalPrompts = await prisma.prompt.count();
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –±–∞–∑–µ: ${totalPrompts}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–º–ø—Ç–æ–≤
    const samplePrompt = await prisma.prompt.findFirst({
      select: {
        id: true,
        title: true,
        tags: true,
        category: true,
        lang: true,
        model: true,
        license: true,
        authorId: true,
        views: true,
        averageRating: true,
        totalRatings: true,
        createdAt: true
      }
    });
    console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞:', samplePrompt);
    
    // –ü—Ä–æ–º–ø—Ç—ã SUNO Master
    const sunoPrompts = await prisma.prompt.findMany({
      where: {
        author: {
          name: 'SUNO Master'
        }
      },
      select: {
        id: true,
        title: true,
        tags: true,
        category: true,
        createdAt: true
      }
    });
    console.log(`üéµ –ü—Ä–æ–º–ø—Ç–æ–≤ SUNO Master: ${sunoPrompts.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–º–ø—Ç–æ–≤
    const recentPrompts = await prisma.prompt.findMany({
      orderBy: {
        createdAt: 'desc'
      },
      take: 10,
      select: {
        id: true,
        title: true,
        tags: true,
        category: true,
        author: {
          select: {
            name: true
          }
        },
        createdAt: true
      }
    });
    
    console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–º–ø—Ç–æ–≤:');
    recentPrompts.forEach((prompt, index) => {
      console.log(`${index + 1}. "${prompt.title}"`);
      console.log(`   –ê–≤—Ç–æ—Ä: ${prompt.author?.name || 'Unknown'}`);
      console.log(`   –¢–µ–≥–∏: ${prompt.tags || '–û–¢–°–£–¢–°–¢–í–£–Æ–¢'}`);
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${prompt.category || '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`   ID: ${prompt.id}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${prompt.createdAt.toLocaleDateString()}`);
      console.log('');
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint
    console.log('üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint /api/prompts...');
    try {
      const response = await fetch('http://localhost:3000/api/prompts');
      const data = await response.json();
      console.log(`‚úÖ API /api/prompts —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ ${data.prompts?.length || 0} –ø—Ä–æ–º–ø—Ç–æ–≤`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ API /api/prompts: ${error.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugMissingPrompts();
