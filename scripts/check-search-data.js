const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkSearchData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞...');
  try {
    const count = await prisma.searchQuery.count();
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ SearchQuery: ${count}`);

    if (count === 0) {
      console.log('‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞.');
    } else {
      const latestQueries = await prisma.searchQuery.findMany({
        orderBy: {
          createdAt: 'desc',
        },
        take: 5,
      });
      console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤:');
      latestQueries.forEach((query, index) => {
        console.log(`${index + 1}. "${query.query}" (–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${query.resultsCount}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${query.userId || '–ì–æ—Å—Ç—å'})`);
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkSearchData();