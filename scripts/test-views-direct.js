/**
 * –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ ViewsService
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ViewsService
const { ViewsService } = require('../lib/services/viewsService')

async function testViewsDirect() {
  console.log('üß™ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ü–†–û–°–ú–û–¢–†–û–í\n')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testPrompts = await prisma.prompt.findMany({
      take: 5,
      select: { id: true, title: true, views: true }
    })

    if (testPrompts.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }

    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testPrompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤:`)
    testPrompts.forEach((p, i) => {
      console.log(`${i + 1}. "${p.title.substring(0, 40)}..." (ID: ${p.id})`)
    })
    console.log()

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º ViewsService –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    for (const prompt of testPrompts) {
      console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç: "${prompt.title.substring(0, 40)}..."`)
      
      const directField = prompt.views
      const viewsServiceSingle = await ViewsService.getPromptViews(prompt.id)
      
      console.log(`  üìä –ü—Ä—è–º–æ–µ –ø–æ–ª–µ: ${directField}`)
      console.log(`  üìä ViewsService (single): ${viewsServiceSingle}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
      if (directField === viewsServiceSingle) {
        console.log(`  ‚úÖ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç`)
      } else {
        console.log(`  ‚ùå –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: ${directField} ‚â† ${viewsServiceSingle}`)
      }
      
      console.log()
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º ViewsService –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
    console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º ViewsService –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...')
    const promptIds = testPrompts.map(p => p.id)
    const viewsServiceMultiple = await ViewsService.getPromptsViews(promptIds)
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã ViewsService.getPromptsViews():')
    for (const [promptId, views] of viewsServiceMultiple) {
      const prompt = testPrompts.find(p => p.id === promptId)
      console.log(`  ${prompt?.title.substring(0, 30)}...: ${views}`)
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ viewAnalytics
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º viewAnalytics...')
    const analytics = await prisma.viewAnalytics.findMany({
      take: 5,
      select: { promptId: true, countedViews: true }
    })
    
    if (analytics.length > 0) {
      console.log('–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ viewAnalytics:')
      analytics.forEach(a => {
        const prompt = testPrompts.find(p => p.id === a.promptId)
        console.log(`  ${prompt?.title.substring(0, 30)}...: ${a.countedViews}`)
      })
    } else {
      console.log('‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ viewAnalytics')
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º promptViewEvent
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º promptViewEvent...')
    const viewEvents = await prisma.promptViewEvent.findMany({
      take: 5,
      where: { isCounted: true },
      select: { promptId: true }
    })
    
    if (viewEvents.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${viewEvents.length} —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`)
    } else {
      console.log('‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º promptInteraction
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º promptInteraction...')
    const interactions = await prisma.promptInteraction.findMany({
      take: 5,
      where: { type: { in: ['view', 'open'] } },
      select: { promptId: true }
    })
    
    if (interactions.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${interactions.length} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π`)
    } else {
      console.log('‚ùå –ù–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π')
    }

    console.log('\n‚úÖ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testViewsDirect().catch(console.error)
