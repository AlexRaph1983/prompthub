const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function getSearchStats() {
  try {
    const days = parseInt(process.argv[2]) || 7
    const startDate = new Date()
    startDate.setDate(startDate.getDate() - days)

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} –¥–Ω–µ–π`)
    console.log(`–ü–µ—Ä–∏–æ–¥: ${startDate.toLocaleDateString('ru-RU')} - ${new Date().toLocaleDateString('ru-RU')}`)
    console.log('‚îÄ'.repeat(60))

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalSearches = await prisma.searchQuery.count({
      where: { createdAt: { gte: startDate } }
    })

    const uniqueUsers = await prisma.searchQuery.findMany({
      where: { createdAt: { gte: startDate } },
      select: { userId: true, ipHash: true },
      distinct: ['userId', 'ipHash']
    })

    const avgResults = await prisma.searchQuery.aggregate({
      where: { createdAt: { gte: startDate } },
      _avg: { resultsCount: true }
    })

    console.log(`–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: ${totalSearches}`)
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${uniqueUsers.length}`)
    console.log(`–°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${avgResults._avg.resultsCount?.toFixed(2) || 0}`)
    console.log()

    // –¢–æ–ø –∑–∞–ø—Ä–æ—Å—ã
    console.log('üî• –¢–æ–ø-10 –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:')
    const topQueries = await prisma.searchQuery.groupBy({
      by: ['query'],
      where: { createdAt: { gte: startDate } },
      _count: { query: true },
      _avg: { resultsCount: true },
      orderBy: { _count: { query: 'desc' } },
      take: 10
    })

    topQueries.forEach((q, i) => {
      console.log(`${i + 1}. "${q.query}" - ${q._count.query} –ø–æ–∏—Å–∫–æ–≤ (${q._avg.resultsCount?.toFixed(1)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`)
    })
    console.log()

    // –ó–∞–ø—Ä–æ—Å—ã –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('‚ö†Ô∏è  –¢–æ–ø-5 –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:')
    const zeroQueries = await prisma.searchQuery.groupBy({
      by: ['query'],
      where: { 
        createdAt: { gte: startDate },
        resultsCount: 0
      },
      _count: { query: true },
      orderBy: { _count: { query: 'desc' } },
      take: 5
    })

    if (zeroQueries.length > 0) {
      zeroQueries.forEach((q, i) => {
        console.log(`${i + 1}. "${q.query}" - ${q._count.query} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤`)
      })
    } else {
      console.log('–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! üéâ')
    }
    console.log()

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    console.log('üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:')
    const dailyStats = await prisma.$queryRaw`
      SELECT 
        DATE(createdAt) as date,
        COUNT(*) as searches,
        COUNT(DISTINCT COALESCE(userId, ipHash)) as unique_users
      FROM SearchQuery 
      WHERE createdAt >= ${startDate}
      GROUP BY DATE(createdAt)
      ORDER BY date DESC
      LIMIT 7
    `

    dailyStats.reverse().forEach(day => {
      console.log(`${day.date}: ${Number(day.searches)} –ø–æ–∏—Å–∫–æ–≤ –æ—Ç ${Number(day.unique_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
    })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/search-stats.js [–¥–Ω–∏]')
console.log('–ü—Ä–∏–º–µ—Ä: node scripts/search-stats.js 30\n')

getSearchStats()
