const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkHitMakerDuplicates() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—Ü–µ–Ω–æ–∫ Hit Maker...\n')
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Hit Maker
    const hitMakerUser = await prisma.user.findFirst({
      where: {
        name: {
          contains: 'Hit Maker'
        }
      }
    })
    
    if (!hitMakerUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Hit Maker –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      return
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${hitMakerUser.name} (ID: ${hitMakerUser.id})`)
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ Hit Maker
    const hitMakerRatings = await prisma.rating.findMany({
      where: {
        userId: hitMakerUser.id
      },
      include: {
        prompt: {
          select: {
            id: true,
            title: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
    
    console.log(`\nüìä –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫ Hit Maker: ${hitMakerRatings.length}`)
    
    if (hitMakerRatings.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
      return
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ promptId –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const ratingsByPrompt = {}
    hitMakerRatings.forEach(rating => {
      const promptId = rating.promptId
      if (!ratingsByPrompt[promptId]) {
        ratingsByPrompt[promptId] = []
      }
      ratingsByPrompt[promptId].push(rating)
    })
    
    console.log('\nüìã –ê–Ω–∞–ª–∏–∑ –æ—Ü–µ–Ω–æ–∫ –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º:')
    
    let totalDuplicates = 0
    const duplicatesToRemove = []
    
    Object.entries(ratingsByPrompt).forEach(([promptId, ratings]) => {
      const promptTitle = ratings[0].prompt?.title || 'Unknown'
      console.log(`\nüéµ –ü—Ä–æ–º–ø—Ç: "${promptTitle}" (ID: ${promptId})`)
      console.log(`   –û—Ü–µ–Ω–æ–∫: ${ratings.length}`)
      
      if (ratings.length > 1) {
        console.log(`   ‚ö†Ô∏è  –î–£–ë–õ–ò–ö–ê–¢–´ –ù–ê–ô–î–ï–ù–´!`)
        totalDuplicates += ratings.length - 1
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é)
        const sortedRatings = ratings.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é –Ω–æ–≤—É—é), –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const toKeep = sortedRatings[0]
        const toRemove = sortedRatings.slice(1)
        
        console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º: ID ${toKeep.id} (${toKeep.createdAt})`)
        
        toRemove.forEach(rating => {
          console.log(`   üóëÔ∏è  –£–¥–∞–ª—è–µ–º: ID ${rating.id} (${rating.createdAt})`)
          duplicatesToRemove.push(rating.id)
        })
      } else {
        console.log(`   ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: ID ${ratings[0].id}`)
      }
    })
    
    console.log(`\nüìä –ò—Ç–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicates}`)
    console.log(`üóëÔ∏è  –û—Ü–µ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${duplicatesToRemove.length}`)
    
    if (duplicatesToRemove.length > 0) {
      console.log('\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã! –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏.')
      console.log('üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.')
    } else {
      console.log('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í—Å–µ –æ—Ü–µ–Ω–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã.')
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkHitMakerDuplicates()

