/**
 * –û—Ç–ª–∞–¥–∫–∞ ViewsService - –ø–æ—á–µ–º—É getPromptViews –∏ getPromptsViews –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

// –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É ViewsService.getPromptViews
async function getPromptViews(promptId) {
  try {
    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: viewAnalytics (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    const analytics = await prisma.viewAnalytics.findFirst({
      where: { promptId },
      select: { countedViews: true }
    })
    
    if (analytics?.countedViews && analytics.countedViews > 0) {
      return analytics.countedViews
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: promptViewEvent (—Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)
    const viewEvents = await prisma.promptViewEvent.count({
      where: { promptId, isCounted: true }
    })
    
    if (viewEvents > 0) {
      return viewEvents
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: promptInteraction (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–∏–ø–∞ view/open)
    const interactions = await prisma.promptInteraction.count({
      where: { promptId, type: { in: ['view', 'open'] } }
    })
    
    if (interactions > 0) {
      return interactions
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 4: fallback –∫ –ø–æ–ª—é views –≤ —Ç–∞–±–ª–∏—Ü–µ prompt
    const prompt = await prisma.prompt.findUnique({
      where: { id: promptId },
      select: { views: true }
    })
    
    return prompt?.views || 0
  } catch (error) {
    console.error('Error getting prompt views:', error)
    return 0
  }
}

// –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É ViewsService.getPromptsViews
async function getPromptsViews(promptIds) {
  const viewTotals = new Map()
  
  if (promptIds.length === 0) {
    return viewTotals
  }

  try {
    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: viewAnalytics –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    const analytics = await prisma.viewAnalytics.groupBy({
      by: ['promptId'],
      where: { promptId: { in: promptIds } },
      _sum: { countedViews: true },
    })
    
    for (const row of analytics) {
      if (row._sum.countedViews && row._sum.countedViews > 0) {
        viewTotals.set(row.promptId, row._sum.countedViews)
      }
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: promptViewEvent –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
    const missingIds = promptIds.filter(id => !viewTotals.has(id))
    if (missingIds.length > 0) {
      const viewEvents = await prisma.promptViewEvent.groupBy({
        by: ['promptId'],
        where: { promptId: { in: missingIds }, isCounted: true },
        _count: { _all: true },
      })
      
      for (const row of viewEvents) {
        if (row._count._all && row._count._all > 0) {
          viewTotals.set(row.promptId, row._count._all)
        }
      }
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: promptInteraction –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
    const stillMissingIds = promptIds.filter(id => !viewTotals.has(id))
    if (stillMissingIds.length > 0) {
      const interactions = await prisma.promptInteraction.groupBy({
        by: ['promptId'],
        where: { promptId: { in: stillMissingIds }, type: { in: ['view', 'open'] } },
        _count: { _all: true },
      })
      
      for (const row of interactions) {
        if (row._count._all && row._count._all > 0) {
          viewTotals.set(row.promptId, row._count._all)
        }
      }
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 4: fallback –∫ –ø–æ–ª—é views –≤ —Ç–∞–±–ª–∏—Ü–µ prompt
    const finalMissingIds = promptIds.filter(id => !viewTotals.has(id))
    if (finalMissingIds.length > 0) {
      const prompts = await prisma.prompt.findMany({
        where: { id: { in: finalMissingIds } },
        select: { id: true, views: true }
      })
      
      for (const prompt of prompts) {
        if (prompt.views && prompt.views > 0) {
          viewTotals.set(prompt.id, prompt.views)
        }
      }
    }

    // –î–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
    for (const promptId of promptIds) {
      if (!viewTotals.has(promptId)) {
        viewTotals.set(promptId, 0)
      }
    }

    return viewTotals
  } catch (error) {
    console.error('Error getting prompts views:', error)
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    for (const promptId of promptIds) {
      viewTotals.set(promptId, 0)
    }
    return viewTotals
  }
}

async function debugViewsService() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê VIEWSERVICE\n')

  const testPromptId = 'cmftyuu1v00539l6hapwra6su'

  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º getPromptViews
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º getPromptViews...')
    const singleResult = await getPromptViews(testPromptId)
    console.log(`  üìä getPromptViews —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${singleResult}`)

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º getPromptsViews
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º getPromptsViews...')
    const multipleResult = await getPromptsViews([testPromptId])
    const multipleViews = multipleResult.get(testPromptId) || 0
    console.log(`  üìä getPromptsViews —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${multipleViews}`)

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò:')
    if (singleResult === multipleViews) {
      console.log(`  ‚úÖ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: ${singleResult} = ${multipleViews}`)
    } else {
      console.log(`  ‚ùå –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: ${singleResult} ‚â† ${multipleViews}`)
      console.log(`  üîß –ü–†–û–ë–õ–ï–ú–ê: ViewsService —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤!`)
    }

    // 4. –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í:')
    
    // viewAnalytics
    const analytics = await prisma.viewAnalytics.findFirst({
      where: { promptId: testPromptId },
      select: { countedViews: true }
    })
    console.log(`  üìä viewAnalytics: ${analytics?.countedViews || 0}`)
    
    // promptViewEvent
    const viewEvents = await prisma.promptViewEvent.count({
      where: { promptId: testPromptId, isCounted: true }
    })
    console.log(`  üìä promptViewEvent: ${viewEvents}`)
    
    // promptInteraction
    const interactions = await prisma.promptInteraction.count({
      where: { promptId: testPromptId, type: { in: ['view', 'open'] } }
    })
    console.log(`  üìä promptInteraction: ${interactions}`)
    
    // prompt.views
    const prompt = await prisma.prompt.findUnique({
      where: { id: testPromptId },
      select: { views: true }
    })
    console.log(`  üìä prompt.views: ${prompt?.views || 0}`)

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º groupBy –∑–∞–ø—Ä–æ—Å—ã
    console.log('\nüîç –ü–†–û–í–ï–†–Ø–ï–ú GROUPBY –ó–ê–ü–†–û–°–´:')
    
    // viewAnalytics groupBy
    const analyticsGroupBy = await prisma.viewAnalytics.groupBy({
      by: ['promptId'],
      where: { promptId: testPromptId },
      _sum: { countedViews: true },
    })
    console.log(`  üìä viewAnalytics groupBy: ${analyticsGroupBy.length} –∑–∞–ø–∏—Å–µ–π`)
    if (analyticsGroupBy.length > 0) {
      console.log(`  üìä viewAnalytics groupBy —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${analyticsGroupBy[0]._sum.countedViews || 0}`)
    }
    
    // promptViewEvent groupBy
    const viewEventsGroupBy = await prisma.promptViewEvent.groupBy({
      by: ['promptId'],
      where: { promptId: testPromptId, isCounted: true },
      _count: { _all: true },
    })
    console.log(`  üìä promptViewEvent groupBy: ${viewEventsGroupBy.length} –∑–∞–ø–∏—Å–µ–π`)
    if (viewEventsGroupBy.length > 0) {
      console.log(`  üìä promptViewEvent groupBy —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${viewEventsGroupBy[0]._count._all || 0}`)
    }
    
    // promptInteraction groupBy
    const interactionsGroupBy = await prisma.promptInteraction.groupBy({
      by: ['promptId'],
      where: { promptId: testPromptId, type: { in: ['view', 'open'] } },
      _count: { _all: true },
    })
    console.log(`  üìä promptInteraction groupBy: ${interactionsGroupBy.length} –∑–∞–ø–∏—Å–µ–π`)
    if (interactionsGroupBy.length > 0) {
      console.log(`  üìä promptInteraction groupBy —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${interactionsGroupBy[0]._count._all || 0}`)
    }

    console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ ViewsService –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

debugViewsService().catch(console.error)
