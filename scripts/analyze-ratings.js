const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function analyzeRatings() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –æ—Ü–µ–Ω–æ–∫ –≤ –ë–î...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    const tables = await prisma.$queryRaw`
      SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;
    `
    console.log('üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î:')
    tables.forEach(table => console.log(`  - ${table.name}`))
    console.log()
    
    // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    const ratingTables = tables.filter(table => 
      table.name.toLowerCase().includes('rating') || 
      table.name.toLowerCase().includes('review') ||
      table.name.toLowerCase().includes('score')
    )
    
    if (ratingTables.length > 0) {
      console.log('‚≠ê –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏:')
      ratingTables.forEach(table => console.log(`  - ${table.name}`))
      console.log()
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É Rating –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      const ratings = await prisma.rating.findMany({
        include: {
          user: {
            select: {
              id: true,
              name: true,
              email: true
            }
          },
          prompt: {
            select: {
              id: true,
              title: true
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        }
      })
      
      console.log(`üìä –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: ${ratings.length}`)
      console.log()
      
      if (ratings.length > 0) {
        console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏:')
        const userStats = {}
        ratings.forEach(rating => {
          const userName = rating.user?.name || 'Unknown'
          if (!userStats[userName]) {
            userStats[userName] = { count: 0, ratings: [] }
          }
          userStats[userName].count++
          userStats[userName].ratings.push({
            id: rating.id,
            score: rating.score,
            promptTitle: rating.prompt?.title || 'Unknown',
            createdAt: rating.createdAt
          })
        })
        
        Object.entries(userStats).forEach(([userName, stats]) => {
          console.log(`  üìù ${userName}: ${stats.count} –æ—Ü–µ–Ω–æ–∫`)
          if (userName === 'Hit maker') {
            console.log('    ‚úÖ –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Hit maker - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ—Ü–µ–Ω–∫–∏')
            stats.ratings.forEach(rating => {
              console.log(`      - ID: ${rating.id}, Score: ${rating.score}, Prompt: ${rating.promptTitle}`)
            })
          } else {
            console.log('    üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ - –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã')
            stats.ratings.forEach(rating => {
              console.log(`      - ID: ${rating.id}, Score: ${rating.score}, Prompt: ${rating.promptTitle}`)
            })
          }
        })
        
        console.log()
        console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ü–µ–Ω–∫–∞–º:')
        const scoreStats = {}
        ratings.forEach(rating => {
          if (!scoreStats[rating.score]) {
            scoreStats[rating.score] = 0
          }
          scoreStats[rating.score]++
        })
        
        Object.entries(scoreStats).forEach(([score, count]) => {
          console.log(`  ${score} –∑–≤–µ–∑–¥: ${count} –æ—Ü–µ–Ω–æ–∫`)
        })
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫:', error.message)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const possibleTables = ['Review', 'Score', 'Vote', 'Like']
    for (const tableName of possibleTables) {
      try {
        const count = await prisma[tableName.toLowerCase()].count()
        console.log(`üìä ${tableName}: ${count} –∑–∞–ø–∏—Å–µ–π`)
      } catch (error) {
        // –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

analyzeRatings()
