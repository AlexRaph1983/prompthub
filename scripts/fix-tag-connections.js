const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixTagConnections() {
  try {
    console.log('üîó –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Ç–µ–≥–æ–≤ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã —Å —Ç–µ–≥–∞–º–∏
    const prompts = await prisma.prompt.findMany({
      select: {
        id: true,
        title: true,
        tags: true
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: ${prompts.length}`);
    
    let connectedCount = 0;
    let errorCount = 0;
    
    for (const prompt of prompts) {
      if (prompt.tags) {
        const tagNames = prompt.tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
        
        for (const tagName of tagNames) {
          try {
            // –°–æ–∑–¥–∞–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–≥–∞
            const slug = tagName
              .toLowerCase()
              .replace(/[^a-z0-9–∞-—è\s]/g, '')
              .replace(/\s+/g, '-')
              .trim();
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–≥ –ø–æ slug
            const tag = await prisma.tag.findUnique({
              where: { slug }
            });
            
            if (tag) {
              // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
              await prisma.promptTag.upsert({
                where: {
                  promptId_tagId: {
                    promptId: prompt.id,
                    tagId: tag.id
                  }
                },
                update: {},
                create: {
                  promptId: prompt.id,
                  tagId: tag.id
                }
              });
              
              connectedCount++;
              console.log(`‚úÖ –°–≤—è–∑–∞–Ω –ø—Ä–æ–º–ø—Ç "${prompt.title}" —Å —Ç–µ–≥–æ–º "${tagName}"`);
            } else {
              console.log(`‚ö†Ô∏è –¢–µ–≥ "${tagName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
            }
          } catch (error) {
            errorCount++;
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–æ–º–ø—Ç–∞ "${prompt.title}" —Å —Ç–µ–≥–æ–º "${tagName}":`, error.message);
          }
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ–≥–æ–≤
    console.log('\nüìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ–≥–æ–≤...');
    
    const tags = await prisma.tag.findMany({
      select: { id: true, slug: true }
    });
    
    for (const tag of tags) {
      const count = await prisma.promptTag.count({
        where: { tagId: tag.id }
      });
      
      await prisma.tag.update({
        where: { id: tag.id },
        data: { promptCount: count }
      });
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–≥–∞ "${tag.slug}": ${count} –ø—Ä–æ–º–ø—Ç–æ–≤`);
    }
    
    console.log(`\n‚úÖ –°–≤—è–∑–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`  - –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: ${connectedCount}`);
    console.log(`  - –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixTagConnections();
