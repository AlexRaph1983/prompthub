const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

const prisma = new PrismaClient()

async function importNewPrompts() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...')
    
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
    const filePath = path.join(__dirname, '..', 'new_prompts_batch.json')
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'))
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${data.items.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`)
    
    let imported = 0
    let skipped = 0
    let errors = 0
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PromptMaster
    let promptMasterUser = await prisma.user.findFirst({
      where: { name: 'PromptMaster' }
    })
    
    if (!promptMasterUser) {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PromptMaster –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      promptMasterUser = await prisma.user.create({
        data: {
          id: 'promptmaster-' + Date.now(),
          name: 'PromptMaster',
          email: 'promptmaster@prompthub.com',
          bio: '–ê–≤—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è PromptHub',
          reputationScore: 100,
          reputationPromptCount: 0
        }
      })
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PromptMaster')
    }
    
    for (const item of data.items) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç
        const existing = await prisma.prompt.findFirst({
          where: {
            title: item.title,
            authorId: promptMasterUser.id
          }
        })
        
        if (existing) {
          console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: ${item.title} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`)
          skipped++
          continue
        }
        
        // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π
        const categoryMapping = {
          'video': 'Video',
          'audio': 'Audio', 
          'image': 'Image',
          'design': 'Design',
          'writing': 'Writing',
          'utilities': 'Productivity'
        }
        
        const mappedCategory = categoryMapping[item.category] || 'Creative'
        
        // –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤
        const languageMapping = {
          'ru': '–†—É—Å—Å–∫–∏–π',
          'en': 'English',
          'multi': 'English'
        }
        
        const mappedLanguage = languageMapping[item.language] || 'English'
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        await prisma.prompt.create({
          data: {
            title: item.title,
            description: item.summary || item.title,
            prompt: item.prompt_text || item.prompt || '',
            model: item.model || 'GPT-4o',
            lang: mappedLanguage,
            category: mappedCategory,
            tags: Array.isArray(item.tags) ? item.tags.join(', ') : (item.tags || ''),
            license: item.license || 'CC-BY',
            authorId: promptMasterUser.id,
            averageRating: 0,
            totalRatings: 0,
            views: 0
          }
        })
        
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${item.title}`)
        imported++
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ "${item.title}":`, error.message)
        errors++
      }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:')
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}`)
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`)
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`)
    
    if (imported > 0) {
      console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importNewPrompts()
