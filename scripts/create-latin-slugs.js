const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createLatinSlugs() {
  try {
    console.log('üîß –°–æ–∑–¥–∞–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–µ slug –¥–ª—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
    const tags = await prisma.tag.findMany({
      select: { id: true, name: true, slug: true }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤: ${tags.length}`);
    
    for (const tag of tags) {
      // –°–æ–∑–¥–∞–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–π slug –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      let latinSlug = tag.name
        .toLowerCase()
        .replace(/[–∞-—è—ë]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
        .replace(/[^a-z0-9\s]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        .trim();
      
      // –ï—Å–ª–∏ slug –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
      if (!latinSlug) {
        const transliteration = {
          '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
          '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
          '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
          '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
          '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        };
        
        latinSlug = tag.name
          .toLowerCase()
          .split('')
          .map(char => transliteration[char] || char)
          .join('')
          .replace(/[^a-z0-9\s]/g, '')
          .replace(/\s+/g, '-')
          .trim();
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
      if (!latinSlug) {
        latinSlug = `tag-${tag.id.slice(-8)}`;
      }
      
      if (latinSlug !== tag.slug) {
        try {
          await prisma.tag.update({
            where: { id: tag.id },
            data: { slug: latinSlug }
          });
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω slug: "${tag.name}" -> "${latinSlug}"`);
        } catch (error) {
          if (error.code === 'P2002') {
            // –ï—Å–ª–∏ slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
            let newSlug = latinSlug;
            let counter = 1;
            while (true) {
              try {
                await prisma.tag.update({
                  where: { id: tag.id },
                  data: { slug: newSlug }
                });
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω slug: "${tag.name}" -> "${newSlug}"`);
                break;
              } catch (e) {
                if (e.code === 'P2002') {
                  newSlug = `${latinSlug}-${counter}`;
                  counter++;
                } else {
                  throw e;
                }
              }
            }
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è "${tag.name}":`, error.message);
          }
        }
      }
    }
    
    console.log('\n‚úÖ –í—Å–µ slug –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createLatinSlugs();
