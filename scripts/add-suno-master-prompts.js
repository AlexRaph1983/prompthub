const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function main() {
  console.log('üéµ Creating SUNO Master user and prompts...')

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SUNO Master
  const sunoUser = await prisma.user.upsert({
    where: { email: 'suno.master@prompthub.site' },
    update: {},
    create: {
      id: 'suno-master-001',
      email: 'suno.master@prompthub.site',
      name: 'SUNO Master',
      image: 'https://lh3.googleusercontent.com/a/default-user=s96-c',
      bio: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –º—É–∑—ã–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ SUNO AI –∏ –¥—Ä—É–≥–∏—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞—Ö. –ü–æ–º–æ–≥–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ö–∏—Ç—ã!',
      website: 'https://suno-master.com',
      telegram: '@sunomaster',
      github: 'suno-master',
      twitter: 'suno_master',
      linkedin: 'suno-master',
      reputationScore: 0,
      reputationPromptCount: 0,
      reputationRatingsSum: 0,
      reputationRatingsCnt: 0,
      reputationLikesCnt: 0,
      reputationSavesCnt: 0,
      reputationCommentsCnt: 0,
    },
  })

  console.log(`‚úÖ SUNO Master user created: ${sunoUser.name}`)

  // –°–æ–∑–¥–∞–µ–º 10 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç SUNO Master
  const sunoPrompts = [
    {
      title: '–•–∏–ø-—Ö–æ–ø –±–∏—Ç —Å –≥–ª—É–±–æ–∫–∏–º –±–∞—Å–æ–º',
      description: '–°–æ–∑–¥–∞–π –º–æ—â–Ω—ã–π —Ö–∏–ø-—Ö–æ–ø —Ç—Ä–µ–∫ —Å –≥–ª—É–±–æ–∫–∏–º –±–∞—Å–æ–º –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º —Ä–∏—Ç–º–æ–º',
      prompt: 'Create a hard-hitting hip-hop beat with deep 808 bass, crisp hi-hats, and aggressive rhythm. The track should have a dark, urban vibe with heavy bass drops and punchy drums. Include some atmospheric elements and make it sound professional and radio-ready.',
      model: 'SUNO AI',
      lang: 'English',
      category: 'Music',
      tags: 'hip-hop,rap,beat,bass,urban',
      license: 'CC-BY',
    },
    {
      title: '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–∞–ª–ª–∞–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º',
      description: '–ù–µ–∂–Ω–∞—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Å–Ω—è –æ –ª—é–±–≤–∏ —Å –∫—Ä–∞—Å–∏–≤–æ–π –º–µ–ª–æ–¥–∏–µ–π',
      prompt: '–°–æ–∑–¥–∞–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –±–∞–ª–ª–∞–¥—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ –≤–µ—á–Ω–æ–π –ª—é–±–≤–∏. –ú–µ–ª–æ–¥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–∂–Ω–æ–π –∏ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–Ω–æ–π, —Å –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–π –≥–∏—Ç–∞—Ä–æ–π –∏ –º—è–≥–∫–∏–º–∏ —Å—Ç—Ä—É–Ω–Ω—ã–º–∏. –¢–µ–∫—Å—Ç –æ —Ç–æ–º, –∫–∞–∫ –¥–≤–æ–µ –ª—é–¥–µ–π –Ω–∞—à–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –∏—Ö –ª—é–±–æ–≤—å –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è.',
      model: 'SUNO AI',
      lang: '–†—É—Å—Å–∫–∏–π',
      category: 'Music',
      tags: '—Ä–æ–º–∞–Ω—Ç–∏–∫–∞,–±–∞–ª–ª–∞–¥–∞,–ª—é–±–æ–≤—å,—Ä—É—Å—Å–∫–∏–π',
      license: 'CC-BY',
    },
    {
      title: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è –º—É–∑—ã–∫–∞ (EDM)',
      description: '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π EDM —Ç—Ä–µ–∫ –¥–ª—è –∫–ª—É–±–æ–≤ –∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π',
      prompt: 'Create an energetic EDM track perfect for clubs and festivals. Include a massive drop with heavy bass, euphoric melodies, and build-ups that make people want to dance. The track should be around 128 BPM with modern electronic elements and a catchy hook.',
      model: 'SUNO AI',
      lang: 'English',
      category: 'Music',
      tags: 'EDM,electronic,dance,club,festival',
      license: 'CC-BY',
    },
    {
      title: '–î–∂–∞–∑–æ–≤–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å —Å–∞–∫—Å–æ—Ñ–æ–Ω–æ–º',
      description: '–°—Ç–∏–ª—å–Ω–∞—è –¥–∂–∞–∑–æ–≤–∞—è –ø—å–µ—Å–∞ –≤ —Å—Ç–∏–ª–µ –±–∏–±–æ–ø —Å —Å–æ–ª–æ —Å–∞–∫—Å–æ—Ñ–æ–Ω–∞',
      prompt: 'Compose a sophisticated jazz piece in bebop style featuring a prominent saxophone solo. Include complex chord progressions, syncopated rhythms, and improvisational elements. The track should have a smoky, late-night jazz club atmosphere with piano, double bass, and drums.',
      model: 'SUNO AI',
      lang: 'English',
      category: 'Music',
      tags: 'jazz,bebop,saxophone,improvisation',
      license: 'CC-BY',
    },
    {
      title: '–†–æ–∫-–ø–µ—Å–Ω—è —Å –º–æ—â–Ω—ã–º–∏ –≥–∏—Ç–∞—Ä–∞–º–∏',
      description: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ä–æ–∫-–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å —Ç—è–∂–µ–ª—ã–º–∏ –≥–∏—Ç–∞—Ä–∞–º–∏ –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º –≤–æ–∫–∞–ª–æ–º',
      prompt: 'Create a powerful rock song with heavy distorted guitars, driving bass, and energetic vocals. The track should have a rebellious spirit with catchy riffs, a strong chorus, and a guitar solo. Think classic rock meets modern alternative with attitude and power.',
      model: 'SUNO AI',
      lang: 'English',
      category: 'Music',
      tags: 'rock,alternative,guitar,energy',
      license: 'CC-BY',
    },
    {
      title: '–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ–ª–∫-–ø–µ—Å–Ω—è',
      description: '–¢–µ–ø–ª–∞—è —Ñ–æ–ª–∫-–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏',
      prompt: '–°–æ–∑–¥–∞–π —Ç–µ–ø–ª—É—é –∞–∫—É—Å—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ–ª–∫-–ø–µ—Å–Ω—é —Å –≥–∏—Ç–∞—Ä–æ–π, —Å–∫—Ä–∏–ø–∫–æ–π –∏ –º–∞–Ω–¥–æ–ª–∏–Ω–æ–π. –ü–µ—Å–Ω—è –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏, –ø—Ä–∏—Ä–æ–¥–µ –∏–ª–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö. –ú–µ–ª–æ–¥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–π—Å—è, —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –≥–∞—Ä–º–æ–Ω–∏—è–º–∏.',
      model: 'SUNO AI',
      lang: '–†—É—Å—Å–∫–∏–π',
      category: 'Music',
      tags: '—Ñ–æ–ª–∫,–∞–∫—É—Å—Ç–∏–∫–∞,–ø—Ä–∏—Ä–æ–¥–∞,–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
      license: 'CC-BY',
    },
    {
      title: '–°–∏–Ω—Ç–≤–µ–π–≤ —Ä–µ—Ç—Ä–æ-—Ç—Ä–µ–∫',
      description: '–ù–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–∏–π —Å–∏–Ω—Ç–≤–µ–π–≤ –≤ —Å—Ç–∏–ª–µ 80-—Ö —Å –Ω–µ–æ–Ω–æ–≤—ã–º–∏ –∑–≤—É–∫–∞–º–∏',
      prompt: 'Create a nostalgic synthwave track that captures the essence of the 1980s. Include analog synthesizers, retro drum machines, and neon-soaked melodies. The track should have a dreamy, cyberpunk atmosphere with arpeggiated synths and a driving bassline.',
      model: 'SUNO AI',
      lang: 'English',
      category: 'Music',
      tags: 'synthwave,retro,80s,cyberpunk,neon',
      license: 'CC-BY',
    },
    {
      title: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∏–º—Ñ–æ–Ω–∏—è',
      description: '–≠–ø–∏—á–µ—Å–∫–∞—è —Å–∏–º—Ñ–æ–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç–∏–ª–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º—É–∑—ã–∫–∏',
      prompt: 'Compose an epic symphonic piece in classical style with full orchestra. Include dramatic crescendos, beautiful string sections, powerful brass, and woodwind melodies. The composition should have multiple movements with varying tempos and emotions, building to a grand finale.',
      model: 'SUNO AI',
      lang: 'English',
      category: 'Music',
      tags: 'classical,symphony,orchestra,epic',
      license: 'CC-BY',
    },
    {
      title: '–†–µ–≥–≥–∏ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–∞–Ω–∏–µ–º',
      description: '–ñ–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω–∞—è —Ä–µ–≥–≥–∏-–ø–µ—Å–Ω—è –æ –º–∏—Ä–µ –∏ –≥–∞—Ä–º–æ–Ω–∏–∏',
      prompt: 'Create an uplifting reggae song with a positive message about peace, love, and unity. Include the characteristic reggae rhythm, warm bassline, and melodic vocals. The song should spread good vibes and make people feel happy and connected.',
      model: 'SUNO AI',
      lang: 'English',
      category: 'Music',
      tags: 'reggae,positive,peace,love,unity',
      license: 'CC-BY',
    },
    {
      title: '–ê–º–±–∏–µ–Ω—Ç–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –º—É–∑—ã–∫–∞',
      description: '–°–ø–æ–∫–æ–π–Ω–∞—è –∞–º–±–∏–µ–Ω—Ç–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏',
      prompt: 'Create a peaceful ambient track perfect for meditation and relaxation. Use soft pads, gentle textures, and minimal percussion. The music should be calming and ethereal, helping listeners find inner peace and tranquility. Include subtle nature sounds if possible.',
      model: 'SUNO AI',
      lang: 'English',
      category: 'Music',
      tags: 'ambient,meditation,relaxation,peaceful',
      license: 'CC-BY',
    },
  ]

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
  for (let i = 0; i < sunoPrompts.length; i++) {
    const promptData = sunoPrompts[i]
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
    const prompt = await prisma.prompt.create({
      data: {
        ...promptData,
        authorId: sunoUser.id,
      },
    })

    // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (–æ—Ç 3 –¥–æ 5 –∑–≤–µ–∑–¥)
    const ratingCount = Math.floor(Math.random() * 15) + 5 // 5-19 —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    const baseRating = 4 + Math.random() // 4-5 –∑–≤–µ–∑–¥ –≤ —Å—Ä–µ–¥–Ω–µ–º

    for (let j = 0; j < ratingCount; j++) {
      // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ü–µ–Ω—â–∏–∫–∞
      const raterId = `suno-rater-${i}-${j}`
      const rater = await prisma.user.upsert({
        where: { id: raterId },
        update: {},
        create: {
          id: raterId,
          name: `Music Lover ${i}-${j}`,
          email: `rater${i}-${j}@music.com`,
        },
      })

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
      const rating = Math.max(3, Math.min(5, Math.round(baseRating + (Math.random() - 0.5))))
      
      await prisma.rating.upsert({
        where: {
          userId_promptId: {
            userId: rater.id,
            promptId: prompt.id,
          },
        },
        update: { value: rating },
        create: {
          value: rating,
          userId: rater.id,
          promptId: prompt.id,
        },
      })
    }

    console.log(`‚úÖ Created prompt: ${promptData.title} (${ratingCount} ratings)`)
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SUNO Master
  const userStats = await prisma.user.findUnique({
    where: { id: sunoUser.id },
    include: {
      prompts: {
        include: {
          ratings: true,
        },
      },
    },
  })

  const totalRatings = userStats.prompts.reduce((sum, prompt) => sum + prompt.ratings.length, 0)
  const ratingsSum = userStats.prompts.reduce((sum, prompt) => 
    sum + prompt.ratings.reduce((promptSum, rating) => promptSum + rating.value, 0), 0
  )

  await prisma.user.update({
    where: { id: sunoUser.id },
    data: {
      reputationPromptCount: userStats.prompts.length,
      reputationRatingsSum: ratingsSum,
      reputationRatingsCnt: totalRatings,
      reputationScore: totalRatings > 0 ? Math.round((ratingsSum / totalRatings) * 20) : 0, // 0-100 scale
    },
  })

  console.log('üéâ SUNO Master and prompts created successfully!')
  console.log(`üìä SUNO Master stats:`)
  console.log(`- Prompts: ${userStats.prompts.length}`)
  console.log(`- Total ratings: ${totalRatings}`)
  console.log(`- Average rating: ${(ratingsSum / totalRatings).toFixed(2)}`)
  console.log(`- Reputation score: ${Math.round((ratingsSum / totalRatings) * 20)}/100`)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
