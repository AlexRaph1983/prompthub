/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 */

async function testNewViewsSystem() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –ü–†–û–°–ú–û–¢–†–û–í\n')
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–µ—Å—Ç–∞
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...')
    const initialResponse = await fetch('http://localhost:3000/api/prompts?authorId=promptmaster&limit=5')
    const initialData = await initialResponse.json()
    
    if (!initialData.items || initialData.items.length === 0) {
      console.error('‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }
    
    const testPrompt = initialData.items[0]
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: "${testPrompt.title.substring(0, 40)}..."`)
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${testPrompt.views}`)
    console.log(`‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${testPrompt.rating} (${testPrompt.ratingCount} –æ—Ü–µ–Ω–æ–∫)`)
    
    // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    console.log('\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º 3 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...')
    
    for (let i = 1; i <= 3; i++) {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      const tokenResponse = await fetch('http://localhost:3000/api/view-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          cardId: testPrompt.id,
          fingerprint: `test-${Date.now()}-${i}`
        })
      })
      
      const tokenData = await tokenResponse.json()
      if (!tokenData.viewToken) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ${i}`)
        continue
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
      const trackResponse = await fetch('http://localhost:3000/api/track-view', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          cardId: testPrompt.id,
          viewToken: tokenData.viewToken
        })
      })
      
      const trackData = await trackResponse.json()
      console.log(`üìà –ü—Ä–æ—Å–º–æ—Ç—Ä ${i}: ${trackData.counted ? '‚úÖ –∑–∞—Å—á–∏—Ç–∞–Ω' : '‚ùå –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω'} (–≤—Å–µ–≥–æ: ${trackData.views})`)
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500))
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...')
    await new Promise(resolve => setTimeout(resolve, 2000)) // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    const updatedResponse = await fetch('http://localhost:3000/api/prompts?authorId=promptmaster&limit=5')
    const updatedData = await updatedResponse.json()
    const updatedPrompt = updatedData.items.find(p => p.id === testPrompt.id)
    
    if (updatedPrompt) {
      console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –î–û: ${testPrompt.views}`)
      console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ü–û–°–õ–ï: ${updatedPrompt.views}`)
      console.log(`üìà –ü—Ä–∏—Ä–æ—Å—Ç: ${updatedPrompt.views - testPrompt.views}`)
      
      if (updatedPrompt.views > testPrompt.views) {
        console.log('‚úÖ –£–°–ü–ï–•: –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
      } else {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å –≤ API!')
      }
    } else {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç')
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã PromptMaster
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã PromptMaster...')
    const allPrompts = updatedData.items
    const withViews = allPrompts.filter(p => p.views > 0)
    const withoutViews = allPrompts.filter(p => p.views === 0)
    
    console.log(`üü¢ –ü—Ä–æ–º–ø—Ç–æ–≤ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏: ${withViews.length}`)
    console.log(`üî¥ –ü—Ä–æ–º–ø—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${withoutViews.length}`)
    
    if (withViews.length > 0) {
      console.log('\nüìä –¢–û–ü –ü–†–û–°–ú–ê–¢–†–ò–í–ê–ï–ú–´–ï:')
      withViews
        .sort((a, b) => b.views - a.views)
        .slice(0, 3)
        .forEach((p, i) => {
          console.log(`${i + 1}. "${p.title.substring(0, 40)}..." - ${p.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`)
        })
    }
    
    // 5. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:')
    const totalViews = allPrompts.reduce((sum, p) => sum + p.views, 0)
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${totalViews}`)
    console.log(`üìà –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø—Ä–æ–º–ø—Ç: ${(totalViews / allPrompts.length).toFixed(1)}`)
    
    if (withViews.length >= allPrompts.length * 0.5) {
      console.log('‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–º–µ—é—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã!')
    } else if (withViews.length > 0) {
      console.log('‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏–º–µ—é—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã')
    } else {
      console.log('‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢: –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏')
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
  }
}

testNewViewsSystem()
