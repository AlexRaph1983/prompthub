const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

const prisma = new PrismaClient()

async function importSunoPrompts() {
  try {
    console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç SUNO –ø—Ä–æ–º–ø—Ç–æ–≤...')
    
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
    const filePath = path.join(__dirname, '..', 'suno_prompts.json')
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'))
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${data.items.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`)
    
    let imported = 0
    let skipped = 0
    
    for (const item of data.items) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç
        const existing = await prisma.prompt.findFirst({
          where: {
            title: item.title,
            authorId: 'suno-master-001' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞
          }
        })
        
        if (existing) {
          console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: ${item.title} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`)
          skipped++
          continue
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        await prisma.prompt.create({
          data: {
            title: item.title,
            description: item.summary || item.title,
            prompt: item.prompt_text,
            model: item.model || 'any',
            lang: item.language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 
                  item.language === 'en' ? 'English' : 'multi',
            category: item.category || 'audio',
            tags: item.tags ? item.tags.join(',') : '',
            license: item.license || 'CC-BY',
            authorId: 'suno-master-001' // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞
          }
        })
        
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${item.title}`)
        imported++
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ "${item.title}":`, error.message)
      }
    }
    
    console.log(`\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`)
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported}`)
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalPrompts = await prisma.prompt.count()
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –±–∞–∑–µ: ${totalPrompts}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error)
  } finally {
    await prisma.$disconnect()
  }
}

importSunoPrompts()