/**
 * –¢–µ—Å—Ç ViewsService
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

// –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É ViewsService
async function getPromptViews(promptId) {
  try {
    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: viewAnalytics (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    const analytics = await prisma.viewAnalytics.findFirst({
      where: { promptId },
      select: { countedViews: true }
    })
    
    if (analytics?.countedViews && analytics.countedViews > 0) {
      return analytics.countedViews
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: promptViewEvent (—Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)
    const viewEvents = await prisma.promptViewEvent.count({
      where: { promptId, isCounted: true }
    })
    
    if (viewEvents > 0) {
      return viewEvents
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: promptInteraction (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–∏–ø–∞ view/open)
    const interactions = await prisma.promptInteraction.count({
      where: { promptId, type: { in: ['view', 'open'] } }
    })
    
    if (interactions > 0) {
      return interactions
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 4: fallback –∫ –ø–æ–ª—é views –≤ —Ç–∞–±–ª–∏—Ü–µ prompt
    const prompt = await prisma.prompt.findUnique({
      where: { id: promptId },
      select: { views: true }
    })
    
    return prompt?.views || 0
  } catch (error) {
    console.error('Error getting prompt views:', error)
    return 0
  }
}

async function testViewsService() {
  console.log('üß™ –¢–ï–°–¢ VIEWSERVICE\n')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testPrompts = await prisma.prompt.findMany({
      take: 5,
      select: { id: true, title: true, views: true }
    })

    if (testPrompts.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }

    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testPrompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤:`)
    testPrompts.forEach((p, i) => {
      console.log(`${i + 1}. "${p.title.substring(0, 40)}..." (ID: ${p.id})`)
    })
    console.log()

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º ViewsService –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    for (const prompt of testPrompts) {
      console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç: "${prompt.title.substring(0, 40)}..."`)
      
      const directField = prompt.views
      const viewsServiceResult = await getPromptViews(prompt.id)
      
      console.log(`  üìä –ü—Ä—è–º–æ–µ –ø–æ–ª–µ: ${directField}`)
      console.log(`  üìä ViewsService: ${viewsServiceResult}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
      if (directField === viewsServiceResult) {
        console.log(`  ‚úÖ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç`)
      } else {
        console.log(`  ‚ùå –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: ${directField} ‚â† ${viewsServiceResult}`)
        console.log(`  üîß ViewsService –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å: ${viewsServiceResult}`)
      }
      
      console.log()
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º ViewsService –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
    console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º ViewsService –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...')
    const promptIds = testPrompts.map(p => p.id)
    
    const viewTotals = new Map()
    for (const promptId of promptIds) {
      const views = await getPromptViews(promptId)
      viewTotals.set(promptId, views)
    }
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã ViewsService:')
    for (const [promptId, views] of viewTotals) {
      const prompt = testPrompts.find(p => p.id === promptId)
      console.log(`  ${prompt?.title.substring(0, 30)}...: ${views}`)
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç ViewsService –∑–∞–≤–µ—Ä—à–µ–Ω!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testViewsService().catch(console.error)
