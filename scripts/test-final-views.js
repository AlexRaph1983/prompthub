/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

// –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É ViewsService
async function getPromptViews(promptId) {
  try {
    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: viewAnalytics (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    const analytics = await prisma.viewAnalytics.findFirst({
      where: { promptId },
      select: { countedViews: true }
    })
    
    if (analytics?.countedViews && analytics.countedViews > 0) {
      return analytics.countedViews
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: promptViewEvent (—Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)
    const viewEvents = await prisma.promptViewEvent.count({
      where: { promptId, isCounted: true }
    })
    
    if (viewEvents > 0) {
      return viewEvents
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 3: promptInteraction (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–∏–ø–∞ view/open)
    const interactions = await prisma.promptInteraction.count({
      where: { promptId, type: { in: ['view', 'open'] } }
    })
    
    if (interactions > 0) {
      return interactions
    }

    // –ü–†–ò–û–†–ò–¢–ï–¢ 4: fallback –∫ –ø–æ–ª—é views –≤ —Ç–∞–±–ª–∏—Ü–µ prompt
    const prompt = await prisma.prompt.findUnique({
      where: { id: promptId },
      select: { views: true }
    })
    
    return prompt?.views || 0
  } catch (error) {
    console.error('Error getting prompt views:', error)
    return 0
  }
}

async function testFinalViews() {
  console.log('üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ü–†–û–°–ú–û–¢–†–û–í\n')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testPrompts = await prisma.prompt.findMany({
      take: 10,
      select: { id: true, title: true, views: true }
    })

    if (testPrompts.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }

    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testPrompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤:`)
    testPrompts.forEach((p, i) => {
      console.log(`${i + 1}. "${p.title.substring(0, 40)}..." (ID: ${p.id})`)
    })
    console.log()

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º ViewsService –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    let consistentCount = 0
    let inconsistentCount = 0
    
    for (const prompt of testPrompts) {
      const directField = prompt.views
      const viewsServiceResult = await getPromptViews(prompt.id)
      
      if (directField === viewsServiceResult) {
        consistentCount++
        console.log(`‚úÖ "${prompt.title.substring(0, 30)}...": –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û (${viewsServiceResult})`)
      } else {
        inconsistentCount++
        console.log(`‚ùå "${prompt.title.substring(0, 30)}...": –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û (${directField} ‚â† ${viewsServiceResult})`)
      }
    }

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:`)
    console.log(`  ‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö: ${consistentCount}`)
    console.log(`  ‚ùå –ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö: ${inconsistentCount}`)
    console.log(`  üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: ${Math.round((consistentCount / testPrompts.length) * 100)}%`)

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
    
    const totalViewsDirect = await prisma.prompt.aggregate({
      _sum: { views: true }
    })
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ ViewsService
    const promptIds = testPrompts.map(p => p.id)
    const viewTotals = new Map()
    for (const promptId of promptIds) {
      const views = await getPromptViews(promptId)
      viewTotals.set(promptId, views)
    }
    const totalViewsService = Array.from(viewTotals.values()).reduce((sum, views) => sum + views, 0)
    
    console.log(`  üìä –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (–ø—Ä—è–º–æ–µ –ø–æ–ª–µ): ${totalViewsDirect._sum.views || 0}`)
    console.log(`  üìä –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (ViewsService): ${totalViewsService}`)

    if (totalViewsDirect._sum.views === totalViewsService) {
      console.log(`  ‚úÖ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–ê`)
    } else {
      console.log(`  ‚ùå –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–ê`)
    }

    // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')
    if (inconsistentCount === 0) {
      console.log('  ‚úÖ –í—Å–µ –ø—Ä–æ–º–ø—Ç—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã! –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞.')
    } else {
      console.log('  üîß –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ prompt.views –¥–ª—è –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤')
      console.log('  üîß ViewsService –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–µ–∑–¥–µ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –ø–æ–ª—è')
    }

    console.log('\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testFinalViews().catch(console.error)
