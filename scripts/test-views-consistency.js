/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ API endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function testViewsConsistency() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ü–†–û–°–ú–û–¢–†–û–í\n')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testPrompts = await prisma.prompt.findMany({
      take: 5,
      select: { id: true, title: true, views: true }
    })

    if (testPrompts.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }

    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testPrompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤:`)
    testPrompts.forEach((p, i) => {
      console.log(`${i + 1}. "${p.title.substring(0, 40)}..." (ID: ${p.id})`)
    })
    console.log()

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π API endpoint
    for (const prompt of testPrompts) {
      console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç: "${prompt.title.substring(0, 40)}..."`)
      
      const results = {
        promptId: prompt.id,
        title: prompt.title,
        directField: prompt.views,
        apiDetails: null,
        apiList: null,
        apiAdmin: null,
        apiStats: null
      }

      try {
        // API –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–º–ø—Ç–∞
        const detailsResponse = await fetch(`http://localhost:3000/api/prompts/${prompt.id}`)
        if (detailsResponse.ok) {
          const detailsData = await detailsResponse.json()
          results.apiDetails = detailsData.views
        }
      } catch (error) {
        console.log(`  ‚ùå API details error: ${error.message}`)
      }

      try {
        // API —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ (–ø–æ–∏—Å–∫ –ø–æ ID)
        const listResponse = await fetch(`http://localhost:3000/api/prompts?q=${prompt.id}`)
        if (listResponse.ok) {
          const listData = await listResponse.json()
          const foundPrompt = listData.items?.find(p => p.id === prompt.id)
          results.apiList = foundPrompt?.views
        }
      } catch (error) {
        console.log(`  ‚ùå API list error: ${error.message}`)
      }

      try {
        // API –∞–¥–º–∏–Ω–∫–∏
        const adminResponse = await fetch(`http://localhost:3000/api/admin/prompts?search=${prompt.id}`)
        if (adminResponse.ok) {
          const adminData = await adminResponse.json()
          const foundPrompt = adminData.prompts?.find(p => p.id === prompt.id)
          results.apiAdmin = foundPrompt?.views
        }
      } catch (error) {
        console.log(`  ‚ùå API admin error: ${error.message}`)
      }

      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log(`  üìä –ü—Ä—è–º–æ–µ –ø–æ–ª–µ: ${results.directField}`)
      console.log(`  üìä API Details: ${results.apiDetails}`)
      console.log(`  üìä API List: ${results.apiList}`)
      console.log(`  üìä API Admin: ${results.apiAdmin}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
      const values = [results.directField, results.apiDetails, results.apiList, results.apiAdmin].filter(v => v !== null)
      const uniqueValues = [...new Set(values)]
      
      if (uniqueValues.length === 1) {
        console.log(`  ‚úÖ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è = ${uniqueValues[0]}`)
      } else {
        console.log(`  ‚ùå –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${uniqueValues.join(', ')}`)
      }
      
      console.log()
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
    
    try {
      const statsResponse = await fetch('http://localhost:3000/api/stats')
      if (statsResponse.ok) {
        const statsData = await statsResponse.json()
        console.log(`  üìä API Stats views: ${statsData.views}`)
      }
    } catch (error) {
      console.log(`  ‚ùå API stats error: ${error.message}`)
    }

    try {
      const adminDashboardResponse = await fetch('http://localhost:3000/api/admin/dashboard')
      if (adminDashboardResponse.ok) {
        const adminData = await adminDashboardResponse.json()
        console.log(`  üìä Admin Dashboard views: ${adminData.data?.views}`)
      }
    } catch (error) {
      console.log(`  ‚ùå Admin dashboard error: ${error.message}`)
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testViewsConsistency().catch(console.error)
