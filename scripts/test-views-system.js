/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */

async function testViewsSystem() {
  const baseUrl = 'http://localhost:3000'
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤...\n')
  
  // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
  console.log('1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤...')
  const promptsResponse = await fetch(`${baseUrl}/api/prompts?limit=3`)
  const promptsData = await promptsResponse.json()
  
  if (!promptsData.items || promptsData.items.length === 0) {
    console.error('‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    return
  }
  
  const testPrompt = promptsData.items[0]
  console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∞: "${testPrompt.title}"`)
  console.log(`üìä –¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${testPrompt.views}`)
  
  // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  console.log('\n2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...')
  const tokenResponse = await fetch(`${baseUrl}/api/view-token`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ 
      cardId: testPrompt.id,
      fingerprint: 'test-fingerprint-' + Date.now()
    })
  })
  
  const tokenData = await tokenResponse.json()
  if (!tokenData.viewToken) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', tokenData)
    return
  }
  
  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: ${tokenData.viewToken.substring(0, 20)}...`)
  
  // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
  console.log('\n3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä...')
  const trackResponse = await fetch(`${baseUrl}/api/track-view`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      cardId: testPrompt.id,
      viewToken: tokenData.viewToken
    })
  })
  
  const trackData = await trackResponse.json()
  console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:`, trackData)
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
  console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã...')
  await new Promise(resolve => setTimeout(resolve, 1000)) // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
  
  const updatedResponse = await fetch(`${baseUrl}/api/prompts?limit=10`)
  const updatedData = await updatedResponse.json()
  const updatedPrompt = updatedData.items.find(p => p.id === testPrompt.id)
  
  if (updatedPrompt) {
    console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–æ: ${testPrompt.views}`)
    console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å–ª–µ: ${updatedPrompt.views}`)
    console.log(`üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${updatedPrompt.views - testPrompt.views}`)
    
    if (updatedPrompt.views > testPrompt.views) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞')
    }
  } else {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
  }
  
  console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
}

testViewsSystem().catch(console.error)
