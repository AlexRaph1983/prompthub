/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω—É–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */

async function diagnoseViewsIssue() {
  try {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ü–†–û–°–ú–û–¢–†–ê–ú–ò\n')
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø—Ä–æ–º–ø—Ç–æ–≤ PromptMaster
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç—ã PromptMaster —á–µ—Ä–µ–∑ API...')
    const response = await fetch('http://localhost:3000/api/prompts?authorId=promptmaster&limit=10')
    const data = await response.json()
    
    if (!data.items) {
      console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API')
      return
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: ${data.items.length}`)
    
    const zeroViews = data.items.filter(p => p.views === 0)
    const nonZeroViews = data.items.filter(p => p.views > 0)
    
    console.log(`üî¥ –° –Ω—É–ª–µ–≤—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏: ${zeroViews.length}`)
    console.log(`üü¢ –° –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏: ${nonZeroViews.length}`)
    
    console.log('\nüìã –î–ï–¢–ê–õ–ò –ü–†–û–ú–ü–¢–û–í:')
    data.items.slice(0, 8).forEach((p, i) => {
      console.log(`${i + 1}. "${p.title.substring(0, 45)}..." - ${p.views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (${p.id})`)
    })
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if (data.items.length > 0) {
      const testPrompt = data.items[0]
      console.log(`\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è: "${testPrompt.title.substring(0, 30)}..."`)
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      const tokenResponse = await fetch('http://localhost:3000/api/view-token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          cardId: testPrompt.id,
          fingerprint: 'test-' + Date.now()
        })
      })
      
      const tokenData = await tokenResponse.json()
      if (tokenData.viewToken) {
        console.log(`‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${tokenData.viewToken.substring(0, 20)}...`)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
        const trackResponse = await fetch('http://localhost:3000/api/track-view', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            cardId: testPrompt.id,
            viewToken: tokenData.viewToken
          })
        })
        
        const trackData = await trackResponse.json()
        console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç track-view:`, trackData)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        console.log('\n‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...')
        await new Promise(resolve => setTimeout(resolve, 2000))
        
        const updatedResponse = await fetch(`http://localhost:3000/api/prompts?authorId=promptmaster&limit=10`)
        const updatedData = await updatedResponse.json()
        const updatedPrompt = updatedData.items.find(p => p.id === testPrompt.id)
        
        if (updatedPrompt) {
          console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –î–û: ${testPrompt.views}`)
          console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ü–û–°–õ–ï: ${updatedPrompt.views}`)
          console.log(`üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${updatedPrompt.views - testPrompt.views}`)
          
          if (updatedPrompt.views > testPrompt.views) {
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å!')
          } else {
            console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å!')
          }
        }
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:', tokenData)
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message)
  }
}

diagnoseViewsIssue()
