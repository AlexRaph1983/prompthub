const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testAdminAPIWithSession() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å —Å–µ—Å—Å–∏–µ–π...\n')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const adminUser = await prisma.user.findFirst({
      where: {
        email: 'yegorovaleksandr@gmail.com'
      }
    })

    console.log('üë§ –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', adminUser ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω')
    console.log('üìß Email:', adminUser?.email)
    console.log('üÜî ID:', adminUser?.id)

    if (!adminUser) {
      console.log('‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
    console.log('ADMIN_EMAIL:', process.env.ADMIN_EMAIL)
    console.log('ADMIN_API_KEY:', process.env.ADMIN_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏...')

    // –¢–µ—Å—Ç 1: –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try {
      const response1 = await fetch('http://localhost:3000/api/admin/dashboard')
      console.log('üì§ –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response1.status, response1.statusText)
      if (!response1.ok) {
        const error1 = await response1.text()
        console.log('‚ùå –û—à–∏–±–∫–∞:', error1)
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message)
    }

    // –¢–µ—Å—Ç 2: –° API –∫–ª—é—á–æ–º
    try {
      const apiKey = process.env.ADMIN_API_KEY
      if (apiKey) {
        const response2 = await fetch('http://localhost:3000/api/admin/dashboard', {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'X-API-Key': apiKey
          }
        })
        console.log('üì§ –° API –∫–ª—é—á–æ–º:', response2.status, response2.statusText)
        if (!response2.ok) {
          const error2 = await response2.text()
          console.log('‚ùå –û—à–∏–±–∫–∞:', error2)
        } else {
          const result2 = await response2.json()
          console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ:', result2)
        }
      } else {
        console.log('‚ùå ADMIN_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message)
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º API check-status
    try {
      const response3 = await fetch('http://localhost:3000/api/admin/check-status')
      console.log('üì§ Check-status:', response3.status, response3.statusText)
      if (!response3.ok) {
        const error3 = await response3.text()
        console.log('‚ùå –û—à–∏–±–∫–∞:', error3)
      } else {
        const result3 = await response3.json()
        console.log('‚úÖ Check-status:', result3)
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message)
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testAdminAPIWithSession()
