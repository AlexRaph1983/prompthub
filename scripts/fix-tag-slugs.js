const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixTagSlugs() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º slug –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ slug
    const tags = await prisma.tag.findMany({
      where: {
        slug: {
          contains: '–∞' // –õ—é–±–æ–π —Ä—É—Å—Å–∫–∏–π —Å–∏–º–≤–æ–ª
        }
      },
      select: { id: true, name: true, slug: true }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤ —Å —Ä—É—Å—Å–∫–∏–º–∏ slug: ${tags.length}`);
    
    for (const tag of tags) {
      // –°–æ–∑–¥–∞–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–π slug
      const latinSlug = tag.name
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        .trim();
      
      if (latinSlug && latinSlug !== tag.slug) {
        try {
          await prisma.tag.update({
            where: { id: tag.id },
            data: { slug: latinSlug }
          });
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω slug: "${tag.name}" -> "${latinSlug}"`);
        } catch (error) {
          if (error.code === 'P2002') {
            // –ï—Å–ª–∏ slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
            let newSlug = latinSlug;
            let counter = 1;
            while (true) {
              try {
                await prisma.tag.update({
                  where: { id: tag.id },
                  data: { slug: newSlug }
                });
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω slug: "${tag.name}" -> "${newSlug}"`);
                break;
              } catch (e) {
                if (e.code === 'P2002') {
                  newSlug = `${latinSlug}-${counter}`;
                  counter++;
                } else {
                  throw e;
                }
              }
            }
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è "${tag.name}":`, error.message);
          }
        }
      }
    }
    
    console.log('\n‚úÖ Slug –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    const updatedTags = await prisma.tag.findMany({
      select: { name: true, slug: true, promptCount: true },
      orderBy: { promptCount: 'desc' },
      take: 10
    });
    
    console.log('\nüìä –¢–æ–ø-10 —Ç–µ–≥–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    updatedTags.forEach(tag => {
      console.log(`  - ${tag.name} (slug: ${tag.slug}, count: ${tag.promptCount})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixTagSlugs();
