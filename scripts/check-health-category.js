const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkHealthCategory() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é health...');
    
    // –ù–∞–π–¥–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é health
    const healthCategory = await prisma.category.findFirst({
      where: { slug: 'health' }
    });
    
    if (healthCategory) {
      console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è health –Ω–∞–π–¥–µ–Ω–∞:');
      console.log('  - ID:', healthCategory.id);
      console.log('  - NameRu:', healthCategory.nameRu);
      console.log('  - Slug:', healthCategory.slug);
      console.log('  - PromptCount:', healthCategory.promptCount);
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ–º–ø—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const prompts = await prisma.prompt.findMany({
        where: { categoryId: healthCategory.id },
        select: { id: true, title: true, category: true }
      });
      
      console.log(`\n–ü—Ä–æ–º–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ health: ${prompts.length}`);
      prompts.forEach(p => {
        console.log(`  - ${p.title} (—Å—Ç–∞—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${p.category})`);
      });
    } else {
      console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è health –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkHealthCategory();
