/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function testViewsSimple() {
  console.log('üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ü–†–û–°–ú–û–¢–†–û–í\n')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testPrompts = await prisma.prompt.findMany({
      take: 5,
      select: { id: true, title: true, views: true }
    })

    if (testPrompts.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }

    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${testPrompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤:`)
    testPrompts.forEach((p, i) => {
      console.log(`${i + 1}. "${p.title.substring(0, 40)}..." (ID: ${p.id})`)
    })
    console.log()

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç
    for (const prompt of testPrompts) {
      console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç: "${prompt.title.substring(0, 40)}..."`)
      
      const directField = prompt.views
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º viewAnalytics
      const analytics = await prisma.viewAnalytics.findFirst({
        where: { promptId: prompt.id },
        select: { countedViews: true }
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º promptViewEvent
      const viewEvents = await prisma.promptViewEvent.count({
        where: { promptId: prompt.id, isCounted: true }
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º promptInteraction
      const interactions = await prisma.promptInteraction.count({
        where: { promptId: prompt.id, type: { in: ['view', 'open'] } }
      })
      
      console.log(`  üìä –ü—Ä—è–º–æ–µ –ø–æ–ª–µ: ${directField}`)
      console.log(`  üìä viewAnalytics: ${analytics?.countedViews || 0}`)
      console.log(`  üìä promptViewEvent: ${viewEvents}`)
      console.log(`  üìä promptInteraction: ${interactions}`)
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
      let prioritySource = 'prompt.views'
      let priorityValue = directField
      
      if (analytics?.countedViews && analytics.countedViews > 0) {
        prioritySource = 'viewAnalytics'
        priorityValue = analytics.countedViews
      } else if (viewEvents > 0) {
        prioritySource = 'promptViewEvent'
        priorityValue = viewEvents
      } else if (interactions > 0) {
        prioritySource = 'promptInteraction'
        priorityValue = interactions
      }
      
      console.log(`  üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: ${prioritySource} = ${priorityValue}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
      if (directField === priorityValue) {
        console.log(`  ‚úÖ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç`)
      } else {
        console.log(`  ‚ùå –ù–ï–ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û: ${directField} ‚â† ${priorityValue}`)
        console.log(`  üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –æ–±–Ω–æ–≤–∏—Ç—å prompt.views –¥–æ ${priorityValue}`)
      }
      
      console.log()
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
    
    const totalViewsDirect = await prisma.prompt.aggregate({
      _sum: { views: true }
    })
    
    console.log(`  üìä –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (–ø—Ä—è–º–æ–µ –ø–æ–ª–µ): ${totalViewsDirect._sum.views || 0}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º viewAnalytics
    const totalAnalytics = await prisma.viewAnalytics.aggregate({
      _sum: { countedViews: true }
    })
    console.log(`  üìä –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (viewAnalytics): ${totalAnalytics._sum.countedViews || 0}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º promptViewEvent
    const totalEvents = await prisma.promptViewEvent.count({
      where: { isCounted: true }
    })
    console.log(`  üìä –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (promptViewEvent): ${totalEvents}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º promptInteraction
    const totalInteractions = await prisma.promptInteraction.count({
      where: { type: { in: ['view', 'open'] } }
    })
    console.log(`  üìä –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã (promptInteraction): ${totalInteractions}`)

    console.log('\n‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testViewsSimple().catch(console.error)
