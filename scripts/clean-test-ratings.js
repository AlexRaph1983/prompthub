const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function cleanTestRatings() {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫...\n')
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "Hit Maker" (—Ç–æ—á–Ω–æ–µ –∏–º—è)
    const hitMakerUser = await prisma.user.findFirst({
      where: {
        name: {
          contains: 'Hit Maker'
        }
      }
    })
    
    if (!hitMakerUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "Hit Maker" –Ω–µ –Ω–∞–π–¥–µ–Ω!')
      console.log('üîç –ò—â–µ–º –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
      
      const similarUsers = await prisma.user.findMany({
        where: {
          name: {
            contains: 'Hit'
          }
        },
        select: {
          id: true,
          name: true,
          email: true
        }
      })
      
      console.log('üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å "Hit" –≤ –∏–º–µ–Ω–∏:')
      similarUsers.forEach(user => {
        console.log(`  - ID: ${user.id}, Name: "${user.name}", Email: ${user.email}`)
      })
      
      if (similarUsers.length === 0) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å "Hit" –≤ –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
        console.log('üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
        
        const allUsers = await prisma.user.findMany({
          select: {
            id: true,
            name: true,
            email: true
          },
          take: 10
        })
        
        console.log('üë• –ü–µ—Ä–≤—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')
        allUsers.forEach(user => {
          console.log(`  - ID: ${user.id}, Name: "${user.name}", Email: ${user.email}`)
        })
        
        return
      }
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Hit Maker: ${hitMakerUser.name} (ID: ${hitMakerUser.id})`)
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
    const allRatings = await prisma.rating.findMany({
      include: {
        user: {
          select: {
            id: true,
            name: true
          }
        }
      }
    })
    
    console.log(`\nüìä –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫ –≤ –ë–î: ${allRatings.length}`)
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ü–µ–Ω–∫–∏ Hit Maker –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ
    const hitMakerRatings = allRatings.filter(rating => rating.user.id === hitMakerUser.id)
    const testRatings = allRatings.filter(rating => rating.user.id !== hitMakerUser.id)
    
    console.log(`‚úÖ –û—Ü–µ–Ω–∫–∏ Hit Maker: ${hitMakerRatings.length}`)
    console.log(`üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${testRatings.length}`)
    
    if (testRatings.length === 0) {
      console.log('‚úÖ –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!')
      return
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫
    console.log('\nüóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
    const testUserStats = {}
    testRatings.forEach(rating => {
      const userName = rating.user.name
      if (!testUserStats[userName]) {
        testUserStats[userName] = 0
      }
      testUserStats[userName]++
    })
    
    Object.entries(testUserStats).forEach(([userName, count]) => {
      console.log(`  üìù ${userName}: ${count} –æ—Ü–µ–Ω–æ–∫`)
    })
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ Hit Maker –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–º
    console.log('\n‚úÖ –û—Ü–µ–Ω–∫–∏ Hit Maker (—Å–æ—Ö—Ä–∞–Ω—è–µ–º):')
    hitMakerRatings.forEach(rating => {
      console.log(`  - ID: ${rating.id}, Score: ${rating.score}, Prompt ID: ${rating.promptId}`)
    })
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    console.log(`\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${testRatings.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫!`)
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è ${hitMakerRatings.length} –æ—Ü–µ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Hit Maker`)
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
    const deleteResult = await prisma.rating.deleteMany({
      where: {
        userId: {
          not: hitMakerUser.id
        }
      }
    })
    
    console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingRatings = await prisma.rating.findMany({
      include: {
        user: {
          select: {
            name: true
          }
        }
      }
    })
    
    console.log(`\nüìä –û—Å—Ç–∞–ª–æ—Å—å –æ—Ü–µ–Ω–æ–∫: ${remainingRatings.length}`)
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –æ—Ü–µ–Ω–∫–∞–º–∏:')
    
    const remainingUserStats = {}
    remainingRatings.forEach(rating => {
      const userName = rating.user.name
      if (!remainingUserStats[userName]) {
        remainingUserStats[userName] = 0
      }
      remainingUserStats[userName]++
    })
    
    Object.entries(remainingUserStats).forEach(([userName, count]) => {
      console.log(`  üìù ${userName}: ${count} –æ—Ü–µ–Ω–æ–∫`)
    })
    
    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error)
  } finally {
    await prisma.$disconnect()
  }
}

cleanTestRatings()
