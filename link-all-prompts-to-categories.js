const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function linkAllPromptsToCategories() {
  try {
    console.log('üîó –°–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –º–µ–Ω—é
    const categories = await prisma.category.findMany({
      select: {
        id: true,
        nameRu: true,
        nameEn: true,
        slug: true
      }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–µ–Ω—é`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –Ω–æ–≤—ã–µ
    const categoryMapping = {
      // –ü—Ä—è–º—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
      'Legal': 'legal',
      'SEO': 'seo', 
      'Video': 'video',
      '3D': '3d',
      'Music': 'music',
      'Analysis': 'analysis',
      'Code': 'code',
      'Image': 'image',
      'Education': 'education',
      'Text': 'chat', // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã -> —á–∞—Ç
      
      // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –Ω–æ–≤—ã–µ
      'writing': 'marketing-writing',
      'coding': 'code',
      'data-analysis': 'analysis',
      'design': 'design',
      'marketing': 'marketing-writing',
      'education': 'education',
      'productivity': 'productivity',
      'audio': 'audio',
      'video': 'video',
      'devops': 'code',
      'customer-support': 'business',
      'research': 'research',
      'health': 'health',
      'finance': 'finance',
      'lifestyle': 'business',
      'business': 'business',
      'utilities': 'business',
      'social-media': 'marketing-writing',
      'arts': 'creative',
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
      'Marketing': 'marketing-writing',
      'Writing': 'marketing-writing',
      'Creative': 'creative',
      'Translation': 'marketing-writing',
      'Development': 'code',
      'Art': 'creative'
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã
    const prompts = await prisma.prompt.findMany({
      where: {
        categoryId: null // –¢–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç—ã –±–µ–∑ —Å–≤—è–∑–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      },
      select: {
        id: true,
        title: true,
        category: true
      }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${prompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –±–µ–∑ —Å–≤—è–∑–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏`);
    
    let linkedCount = 0;
    let skippedCount = 0;
    
    for (const prompt of prompts) {
      const oldCategory = prompt.category;
      const newCategorySlug = categoryMapping[oldCategory];
      
      if (newCategorySlug) {
        const category = categories.find(c => c.slug === newCategorySlug);
        
        if (category) {
          await prisma.prompt.update({
            where: { id: prompt.id },
            data: { categoryId: category.id }
          });
          
          console.log(`‚úÖ –°–≤—è–∑–∞–ª "${prompt.title}" (${oldCategory}) -> ${category.nameRu}`);
          linkedCount++;
        } else {
          console.log(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${newCategorySlug} –¥–ª—è ${oldCategory}`);
          skippedCount++;
        }
      } else {
        console.log(`‚ö†Ô∏è –ù–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${oldCategory}`);
        skippedCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`‚úÖ –°–≤—è–∑–∞–Ω–æ: ${linkedCount} –ø—Ä–æ–º–ø—Ç–æ–≤`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –ø—Ä–æ–º–ø—Ç–æ–≤`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    for (const category of categories) {
      const count = await prisma.prompt.count({
        where: {
          categoryId: category.id
        }
      });
      
      await prisma.category.update({
        where: { id: category.id },
        data: { promptCount: count }
      });
      
      console.log(`üìä ${category.nameRu}: ${count} –ø—Ä–æ–º–ø—Ç–æ–≤`);
    }
    
    console.log('\nüéâ –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

linkAllPromptsToCategories();
