const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkData() {
  try {
    console.log('üîç Checking data integrity...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤
    const promptCount = await prisma.prompt.count();
    console.log(`üìä Total prompts: ${promptCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryCount = await prisma.category.count();
    console.log(`üìÅ Total categories: ${categoryCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏
    const tagCount = await prisma.tag.count();
    console.log(`üè∑Ô∏è Total tags: ${tagCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const promptsWithCategory = await prisma.prompt.count({
      where: { categoryId: { not: null } }
    });
    console.log(`üîó Prompts linked to new categories: ${promptsWithCategory}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const oldCategories = await prisma.prompt.groupBy({
      by: ['category'],
      _count: { category: true }
    });
    
    console.log('\nüìã Old categories still in use:');
    oldCategories.forEach(cat => {
      console.log(`  - ${cat.category}: ${cat._count.category} prompts`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const newCategories = await prisma.category.findMany({
      select: {
        nameRu: true,
        slug: true,
        promptCount: true
      },
      orderBy: { promptCount: 'desc' }
    });
    
    console.log('\nüÜï New categories:');
    newCategories.forEach(cat => {
      console.log(`  - ${cat.nameRu} (${cat.slug}): ${cat.promptCount} prompts`);
    });
    
    console.log('\n‚úÖ Data integrity check completed!');
    
  } catch (error) {
    console.error('‚ùå Error checking data:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkData();
