const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function resetAllRatings() {
  try {
    console.log('üîÑ –û–±–Ω—É–ª—è–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    const promptsWithRatings = await prisma.prompt.findMany({
      where: {
        OR: [
          { rating: { not: 0 } },
          { ratingCount: { not: 0 } },
          { totalRatings: { not: 0 } },
          { averageRating: { not: 0 } }
        ]
      },
      select: {
        id: true,
        title: true,
        rating: true,
        ratingCount: true,
        totalRatings: true,
        averageRating: true
      }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${promptsWithRatings.length} –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏`);
    
    if (promptsWithRatings.length > 0) {
      console.log('\nüìä –ü—Ä–æ–º–ø—Ç—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏:');
      promptsWithRatings.forEach(prompt => {
        console.log(`- ${prompt.title}: rating=${prompt.rating}, ratingCount=${prompt.ratingCount}, totalRatings=${prompt.totalRatings}, averageRating=${prompt.averageRating}`);
      });
    }
    
    // –û–±–Ω—É–ª—è–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
    const result = await prisma.prompt.updateMany({
      data: {
        rating: 0,
        ratingCount: 0,
        totalRatings: 0,
        averageRating: 0
      }
    });
    
    console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.count} –ø—Ä–æ–º–ø—Ç–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingRatings = await prisma.prompt.findMany({
      where: {
        OR: [
          { rating: { not: 0 } },
          { ratingCount: { not: 0 } },
          { totalRatings: { not: 0 } },
          { averageRating: { not: 0 } }
        ]
      },
      select: {
        id: true,
        title: true,
        rating: true,
        ratingCount: true,
        totalRatings: true,
        averageRating: true
      }
    });
    
    if (remainingRatings.length === 0) {
      console.log('üéâ –í—Å–µ –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω—ã!');
    } else {
      console.log(`‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${remainingRatings.length} –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏:`);
      remainingRatings.forEach(prompt => {
        console.log(`- ${prompt.title}: rating=${prompt.rating}, ratingCount=${prompt.ratingCount}, totalRatings=${prompt.totalRatings}, averageRating=${prompt.averageRating}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫:', error);
  } finally {
    await prisma.$disconnect();
  }
}

resetAllRatings();
