const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTagsFromPrompts() {
  try {
    console.log('üîç Creating tags from prompts...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã —Å —Ç–µ–≥–∞–º–∏
    const prompts = await prisma.prompt.findMany({
      select: {
        tags: true,
      },
    });

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    const allTags = new Set();
    prompts.forEach(prompt => {
      if (prompt.tags) {
        let tags = [];
        if (typeof prompt.tags === 'string') {
          tags = prompt.tags.split(',').map(tag => tag.trim()).filter(Boolean);
        } else if (Array.isArray(prompt.tags)) {
          tags = prompt.tags.map(tag => String(tag).trim()).filter(Boolean);
        }
        tags.forEach(tag => allTags.add(tag));
      }
    });

    console.log(`Found ${allTags.size} unique tags in prompts`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Tag
    let createdCount = 0;
    let skippedCount = 0;

    for (const tagName of allTags) {
      try {
        // –°–æ–∑–¥–∞–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–≥–∞
        const slug = tagName
          .toLowerCase()
          .replace(/[^a-z0-9–∞-—è\s]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
          .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
          .replace(/--+/g, '-') // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
          .trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥
        const existingTag = await prisma.tag.findFirst({
          where: {
            OR: [
              { name: tagName },
              { slug: slug }
            ]
          }
        });

        if (existingTag) {
          console.log(`‚ö†Ô∏è  Tag "${tagName}" already exists`);
          skippedCount++;
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
        const tag = await prisma.tag.create({
          data: {
            name: tagName,
            slug: slug,
            description: `–ü—Ä–æ–º–ø—Ç—ã —Å —Ç–µ–≥–æ–º "${tagName}"`,
            isActive: true,
            isNsfw: false,
          }
        });

        console.log(`‚úÖ Created tag: "${tagName}" (slug: ${slug})`);
        createdCount++;

      } catch (error) {
        console.error(`‚ùå Error creating tag "${tagName}":`, error.message);
      }
    }

    console.log(`\nüéâ Tag creation completed!`);
    console.log(`‚úÖ Created: ${createdCount} tags`);
    console.log(`‚ö†Ô∏è  Skipped: ${skippedCount} tags`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ–≥–æ–≤
    console.log('\nüîÑ Updating tag counts...');
    
    const tags = await prisma.tag.findMany({
      select: { id: true, name: true }
    });

    for (const tag of tags) {
      // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º
      const count = await prisma.prompt.count({
        where: {
          tags: {
            contains: tag.name
          }
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
      await prisma.tag.update({
        where: { id: tag.id },
        data: { promptCount: count }
      });

      console.log(`‚úÖ ${tag.name}: ${count} prompts`);
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTagsFromPrompts();
