// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  prompts   Prompt[]
  ratings   Rating[]
  reviews   Review[]
  likes     Like[]
  saves     Save[]
  comments  Comment[]
  preferences UserPreference?

  // Profile fields
  bio       String?  // Описание профиля
  website   String?  // Сайт
  telegram  String?  // Telegram
  github    String?  // GitHub
  twitter   String?  // Twitter/X
  linkedin  String?  // LinkedIn

  // Reputation fields
  reputationScore       Int      @default(0)
  reputationPromptCount Int      @default(0)
  reputationRatingsSum  Int      @default(0)
  reputationRatingsCnt  Int      @default(0)
  reputationLikesCnt    Int      @default(0)
  reputationSavesCnt    Int      @default(0)
  reputationCommentsCnt Int      @default(0)
}

model Prompt {
  id          String   @id @default(cuid())
  title       String
  description String
  prompt      String
  model       String
  lang        String
  category    String
  tags        String
  license     String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  ratings     Rating[]
  reviews     Review[]
  likes       Like[]
  saves       Save[]
  comments    Comment[]
  vectors     PromptVector?

  // Кэш для средней оценки и числа оценок (обновляется после каждого ревью/рейтинга)
  averageRating Float   @default(0)
  totalRatings  Int     @default(0)
  views       Int     @default(0)
  viewEvents  PromptViewEvent[]

  @@unique([title, authorId])
}

model Rating {
  id        String   @id @default(cuid())
  value     Int
  userId    String
  promptId  String
  user      User     @relation(fields: [userId], references: [id])
  prompt    Prompt   @relation(fields: [promptId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, promptId])
}

/// Review: расширенная оценка с текстовым комментарием
model Review {
  id        String   @id @default(cuid())
  promptId  String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  prompt    Prompt   @relation(fields: [promptId], references: [id])

  @@unique([promptId, userId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  user      User     @relation(fields: [userId], references: [id])
  prompt    Prompt   @relation(fields: [promptId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, promptId])
}

model Save {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  user      User     @relation(fields: [userId], references: [id])
  prompt    Prompt   @relation(fields: [promptId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, promptId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  prompt    Prompt   @relation(fields: [promptId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

/// User saved preferences to guide recommendations
model UserPreference {
  userId     String   @id
  categories Json
  models     Json
  languages  Json
  tags       Json
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

/// Logged user interactions with prompts for personalization
model PromptInteraction {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  type      String   // view | open | copy | save | rate
  weight    Float    @default(1)
  createdAt DateTime @default(now())

  @@index([userId, promptId])
  @@index([promptId])
}

/// Cached prompt vectors for fast similarity queries
model PromptVector {
  promptId String  @id
  vector   Json
  updatedAt DateTime @updatedAt
  prompt   Prompt  @relation(fields: [promptId], references: [id])
}


model PromptViewEvent {
  id          String   @id @default(cuid())
  promptId    String
  prompt      Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  userId      String?
  ipHash      String?
  uaHash      String?
  fpHash      String?
  viewTokenId String?
  isCounted   Boolean  @default(false)
  reason      String?
  createdAt   DateTime @default(now())

  @@index([promptId, createdAt])
  @@index([userId, promptId, createdAt])
  @@index([ipHash, createdAt])
  @@index([isCounted, createdAt])
}

/// Система мониторинга и алертов для просмотров
model ViewMonitoringAlert {
  id          String   @id @default(cuid())
  type        String   // SPIKE_DETECTION, HIGH_REJECTION_RATE, SUSPICIOUS_PATTERN
  severity    String   // LOW, MEDIUM, HIGH, CRITICAL
  message     String
  metadata    Json?    // Дополнительные данные для алерта
  isResolved  Boolean  @default(false)
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())

  @@index([type, createdAt])
  @@index([severity, isResolved])
}

/// Агрегированная статистика просмотров для аналитики
model ViewAnalytics {
  id              String   @id @default(cuid())
  promptId        String
  date            DateTime
  totalViews      Int      @default(0)
  countedViews    Int      @default(0)
  rejectedViews   Int      @default(0)
  uniqueUsers     Int      @default(0)
  uniqueGuests    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([promptId, date])
  @@index([date])
  @@index([promptId, date])
}

